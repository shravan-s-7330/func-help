{
    "window": [
        {
            "parentName": "ROLLING_SUM",
            "funcName": "rolling_sum",
            "displayName": "Rolling Sum",
            "funcType": "conditional aggregate",
            "description": "Returns the rolling sum value from a window of rows, consisting of a number of rows before and after the current row.",
            "args": 3,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is <b>-1</b>",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is <b>0</b>",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "rolling_sum('Sales', 1, 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rolling Sum"],
                ["21/02/2012", "Groceries", "120", "220"],
                ["12/05/2012", "Groceries", "100", "330"],
                ["15/06/2012", "Groceries", "110", "210"],
                ["22/01/2012", "Stationery", "200", "300"],
                ["10/04/2012", "Stationery", "100", "300"]
            ]
        },
        {
            "parentName": "ROLLING_AVG",
            "funcName": "rolling_avg",
            "displayName": "Rolling Average",
            "funcType": "conditional aggregate",
            "description": "Returns the rolling average value from a window of rows consisting of a number of rows before and after the current row.",
            "args": 3,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is -1 which includes all the rows before the current row.",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is 0 which includes the current row.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "rolling_avg(`Sales` , 1 , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rolling Avg"],
                ["21/02/2012", "Groceries", "120", "110"],
                ["12/05/2012", "Groceries", "100", "110"],
                ["15/06/2012", "Groceries", "110", "105"],
                ["22/01/2012", "Stationery", "200", "150"],
                ["10/04/2012", "Stationery", "100", "150"]
            ]
        },
        {
            "parentName": "ROLLING_MIN",
            "funcName": "rolling_min",
            "displayName": "Rolling Minimum",
            "funcType": "conditional aggregate",
            "description": "Returns the rolling minimum value from a window of rows consisting of a number of rows before and after the current row",
            "args": 3,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is -1 which includes all the rows before the current row.",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is 0 which includes the current row.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "rolling_min(`Sales` , 1 , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rolling Min"],
                ["21/02/2012", "Groceries", "120", "100"],
                ["12/05/2012", "Groceries", "100", "100"],
                ["15/06/2012", "Groceries", "110", "100"],
                ["22/01/2012", "Stationery", "200", "100"],
                ["10/04/2012", "Stationery", "100", "100"]
            ]
        },
        {
            "parentName": "ROLLING_MAX",
            "funcName": "rolling_max",
            "displayName": "Rolling Maximum",
            "funcType": "conditional aggregate",
            "description": "Returns the rolling maximum value from a window of rows consisting of a number of rows before and after the current row.",
            "args": 3,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is -1 which includes all the rows before the current row.",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is 0 which includes the current row.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "rolling_max(`Sales` , 1 , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rolling Max"],
                ["21/02/2012", "Groceries", "120", "120"],
                ["12/05/2012", "Groceries", "100", "120"],
                ["15/06/2012", "Groceries", "110", "110"],
                ["22/01/2012", "Stationery", "200", "200"],
                ["10/04/2012", "Stationery", "100", "200"]
            ]
        },
        {
            "parentName": "ROLLING_STDDEV",
            "funcName": "rolling_stddev",
            "displayName": "Rolling Standard Deviation",
            "funcType": "conditional aggregate",
            "description": "Returns the rolling standard deviation value from a window of rows consisting of a number of rows before and after the current row.",
            "args": 3,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is -1 which includes all the rows before the current row.",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is 0 which includes the current row.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "rolling_stddev(`Sales` , 1 , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rolling Stddev"],
                ["21/02/2012", "Groceries", "120", "10"],
                ["12/05/2012", "Groceries", "100", "8.16496580927726"],
                ["15/06/2012", "Groceries", "110", "5"],
                ["22/01/2012", "Stationery", "200", "50"],
                ["10/04/2012", "Stationery", "100", "50"]
            ]
        },
        {
            "parentName": "ROLLING_VARIANCE",
            "funcName": "rolling_variance",
            "displayName": "Rolling Variance",
            "funcType": "conditional aggregate",
            "description": "Returns the rolling variance value from a window of rows consisting of a number of rows before and after the current row.",
            "args": 3,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is -1 which includes all the rows before the current row.",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is 0 which includes the current row.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "rolling_variance(`Sales` , 1 , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rolling Variance"],
                ["21/02/2012", "Groceries", "120", "100"],
                ["12/05/2012", "Groceries", "100", "66.66666666666667"],
                ["15/06/2012", "Groceries", "110", "25"],
                ["22/01/2012", "Stationery", "200", "2500"],
                ["10/04/2012", "Stationery", "100", "2500"]
            ]
        },
        {
            "parentName": "ROLLING_COUNT",
            "funcName": "rolling_count",
            "displayName": "Rolling Count",
            "funcType": "conditional aggregate",
            "description": "Returns the rolling count values (that are not null) from a window of rows consisting of a number of rows before and after the current row.",
            "args": 3,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is -1 which includes all the rows before the current row.",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is 0 which includes the current row.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "rolling_count(`Sales` , 1 , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rolling Count"],
                ["21/02/2012", "Groceries", "120", "2"],
                ["12/05/2012", "Groceries", "100", "3"],
                ["15/06/2012", "Groceries", "110", "2"],
                ["22/01/2012", "Stationery", "200", "2"],
                ["10/04/2012", "Stationery", "100", "2"]
            ]
        },
        {
            "parentName": "row_number",
            "funcName": "row_number",
            "displayName": "Row Number",
            "funcType": "conditional aggregate",
            "description": "Returns the row number from a window of rows based on the sort by and group by conditions.",
            "args": 0,
            "argTypes": [],
            "examples": {
                "functions": [
                    {
                        "function": "row_number()",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Row Number"],
                ["21/02/2012", "Groceries", "120", "1"],
                ["12/05/2012", "Groceries", "100", "2"],
                ["15/06/2012", "Groceries", "110", "3"],
                ["22/01/2012", "Stationery", "200", "1"],
                ["10/04/2012", "Stationery", "100", "2"]
            ]
        },
        {
            "parentName": "FILL",
            "funcName": "fill",
            "displayName": "Fill",
            "funcType": "conditional aggregate",
            "description": "Returns the values from the column with empty cells filled by the closest non-empty value from the preceding rows within the window of rows consisting of a number of rows before and after the current row.",
            "args": 4,
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter is mandatory and must be a numeric value from a column or an expression that returns a number."
                },
                {
                    "argType": "boolean",
                    "argName": "fillEmpty",
                    "argDesc": "Specify true if the empty rows should be filled, false otherwise."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row. The default value is -1 which includes all the rows before the current row.",
                    "isOptional": true,
                    "defaultValue": -1
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row. The default value is 0 which includes the current row.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "fill(`Sales`, false, 1 , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Groceries", " "],
                ["21/02/2012", "Groceries", " "],
                ["12/05/2012", "Groceries", "120"],
                ["15/06/2012", "Groceries", "120"]
            ],
            "output": [
                ["Date", "Product", "Price", "Fill"],
                ["22/01/2012", "Groceries", " ", " "],
                ["21/02/2012", "Groceries", " ", "120"],
                ["12/05/2012", "Groceries", "120", "120"],
                ["15/06/2012", "Groceries", "120", "120"],
                ["10/04/2012", "Stationery", "100", "100"]
            ]
        },
        {
            "parentName": "lag",
            "funcName": "lag",
            "displayName": "Lag",
            "funcType": "conditional aggregate",
            "description": "Returns the value at a specified number of rows preceding the current row in the column.",
            "args": 2,
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. This parameter can be a column of any datatype."
                },
                {
                    "argType": "number",
                    "argName": "rowsbefore",
                    "argDesc": "Specifies the number of rows before the current row."
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "lag(`Sales` , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Lag"],
                ["21/02/2012", "Groceries", "120", " "],
                ["12/05/2012", "Groceries", "100", "120"],
                ["15/06/2012", "Groceries", "110", "100"],
                ["22/01/2012", "Stationery", "200", " "],
                ["10/04/2012", "Stationery", "100", "200"]
            ]
        },
        {
            "parentName": "lead",
            "funcName": "lead",
            "displayName": "Lead",
            "funcType": "conditional aggregate",
            "description": "Returns the value at a specified number of rows after the current row in the column.",
            "args": 2,
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "col1",
                    "argDesc": "Specifies the source column. It is mandatory and can be of a string type column."
                },
                {
                    "argType": "number",
                    "argName": "rowsafter",
                    "argDesc": "Specifies the number of rows after the current row."
                }
            ],
            "examples": {
                "functions": [
                    {
                        "function": "lead(`Sales` , 1)",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Lead"],
                ["21/02/2012", "Groceries", "120", "100"],
                ["12/05/2012", "Groceries", "100", "110"],
                ["15/06/2012", "Groceries", "110", " "],
                ["22/01/2012", "Stationery", "200", "100"],
                ["10/04/2012", "Stationery", "100", " "]
            ]
        },
        {
            "parentName": "rank",
            "funcName": "rank",
            "displayName": "Rank",
            "funcType": "conditional aggregate",
            "description": "Returns the ranking from a window of rows based on the sort by and group by conditions. If there is a tie, the subsequent number of ranks are skipped in the following rows.",
            "args": 0,
            "argTypes": [],
            "examples": {
                "functions": [
                    {
                        "function": "rank()",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["10/05/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Rank"],
                ["21/02/2012", "Groceries", "120", "1"],
                ["12/05/2012", "Groceries", "100", "1"],
                ["15/06/2012", "Groceries", "110", "3"],
                ["10/04/2012", "Stationery", "100", "1"],
                ["10/05/2012", "Stationery", "200", "2"]
            ]
        },
        {
            "parentName": "dense_rank",
            "funcName": "dense_rank",
            "displayName": "Dense Rank",
            "funcType": "conditional aggregate",
            "description": "Returns the dense ranking from a window of rows based on the sort by and group by conditions. If there is a tie, there is no rank that is skipped.",
            "args": 0,
            "argTypes": [],
            "examples": {
                "functions": [
                    {
                        "function": "dense_rank()",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["10/05/2012", "Stationery", "200"],
                ["20/02/2012", "Groceries", "120"],
                ["21/02/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "Dense Rank"],
                ["20/02/2012", "Groceries", "120", "1"],
                ["21/02/2012", "Groceries", "100", "1"],
                ["15/06/2012", "Groceries", "110", "2"],
                ["10/04/2012", "Stationery", "100", "1"],
                ["10/05/2012", "Stationery", "200", "2"]
            ]
        },
        {
            "parentName": "cume_dist",
            "funcName": "cumulative_distribution",
            "displayName": "Cumulative distribution",
            "funcType": "conditional aggregate",
            "description": "Returns the cumulative distribution values from a window of rows.",
            "args": 0,
            "argTypes": [],
            "examples": {
                "functions": [
                    {
                        "function": "cumulative_distribution()",
                        "sort": "Date",
                        "group": "Product"
                    }
                ]
            },
            "input": [
                ["Date", "Product", "Price"],
                ["10/04/2012", "Stationery", "100"],
                ["22/01/2012", "Stationery", "200"],
                ["21/02/2012", "Groceries", "120"],
                ["12/05/2012", "Groceries", "100"],
                ["15/06/2012", "Groceries", "110"]
            ],
            "output": [
                ["Date", "Product", "Price", "cumulative Distribution"],
                ["21/02/2012", "Groceries", "120", "0.333333333333333"],
                ["12/05/2012", "Groceries", "100", "0.666666666666667"],
                ["15/06/2012", "Groceries", "110", "1"],
                ["22/01/2012", "Stationery", "200", "0.5"],
                ["10/04/2012", "Stationery", "100", "1"]
            ]
        }
    ],
    "formula": [
        {
            "parentName": "abs",
            "funcName": "abs",
            "displayName": "Abs",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric value from a column or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "description": "Returns the absolute value of the numeric value.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "abs(-1)",
                        "result": "1"
                    },
                    {
                        "function": "abs(5 + 2)",
                        "result": "1"
                    },
                    {
                        "function": "abs('-1')",
                        "result": " ",
                        "error": true
                    },
                    {
                        "function": "abs(5 + 'a')",
                        "result": " ",
                        "error": true
                    }
                ]
            }
        },
        {
            "parentName": "div",
            "funcName": "div",
            "displayName": "Div",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "numerator",
                    "argDesc": "The parameter must be a non zero number, decimal, numeric column, or an expression or function returning a numeric value."
                },
                {
                    "argType": "decimal",
                    "argName": "denominator",
                    "argDesc": "The parameter must be a non zero number, decimal, numeric column, or an expression or function returning a numeric value."
                }
            ],
            "funcType": "math",
            "description": "Performs floating-point division. Returns a decimal value.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "div(3,2.1)",
                        "result": "1.5"
                    },
                    {
                        "function": "div(3,1.5)",
                        "result": "2"
                    },
                    {
                        "function": "div(3, 'a')",
                        "result": " ",
                        "error": true
                    },
                    {
                        "function": "div(3,0)",
                        "result": " ",
                        "error": true
                    }
                ]
            }
        },
        {
            "parentName": "add_number",
            "funcName": "add",
            "displayName": "Add",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num1",
                    "argDesc": "Parameter must be a numeric value or a Number column."
                },
                {
                    "argType": "decimal",
                    "argName": "num2",
                    "argDesc": "Parameter must be a numeric value or a Number column."
                }
            ],
            "funcType": "math",
            "description": "Returns param1+param2. Performs numeric addition.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "add('3', '2')",
                        "result": "5"
                    },
                    {
                        "function": "add('3', '2')",
                        "result": "5"
                    },
                    {
                        "function": "add('3', '2')",
                        "result": "5"
                    },
                    {
                        "function": "add('3', '2')",
                        "result": "5"
                    }
                ]
            }
        },
        {
            "parentName": "sub",
            "funcName": "sub",
            "displayName": "Sub",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param1",
                    "argDesc": "Parameter must be a numeric value."
                },
                {
                    "argType": "decimal",
                    "argName": "param2",
                    "argDesc": "Parameter must be a numeric value."
                }
            ],
            "funcType": "math",
            "description": "Performs numeric subtraction. Returns param1 - param2.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "sub('3', '2')",
                        "result": "1"
                    }
                ]
            }
        },
        {
            "parentName": "mul",
            "funcName": "mul",
            "displayName": "Mul",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param1",
                    "argDesc": "Parameter must be a numeric value."
                },
                {
                    "argType": "decimal",
                    "argName": "param2",
                    "argDesc": "Parameter must be a numeric value."
                }
            ],
            "funcType": "math",
            "description": "Performs numeric multiplication.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "mul('3', '2')",
                        "result": "6"
                    }
                ]
            }
        },
        {
            "parentName": "avg",
            "funcName": "avg",
            "displayName": "Avg",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "list",
                    "argDesc": "Parameter must be a numeric column, or a list of numbers"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the average value in a numeric column or list",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "avg(ticket_count);",
                        "result": "60"
                    }
                ]
            }
        },
        {
            "parentName": "min",
            "funcName": "min",
            "displayName": "Min",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric column or a list of numeric values"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the minimum value in a list of numeric values",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "min('ticket_count');",
                        "result": "30"
                    }
                ]
            }
        },
        {
            "parentName": "max",
            "funcName": "max",
            "displayName": "Max",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric column"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the maximum value from a numeric column",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "max('ticket_count');",
                        "result": "90"
                    }
                ]
            }
        },
        {
            "parentName": "max",
            "funcName": "max_date",
            "displayName": "Max Date",
            "args": 1,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Parameter must be a Date column or a Datetime column."
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the maximum date value from a Date or a Datetime column.",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018, 17 Nov 2019, 20 Oct 2020"
                ],
                "functions": [
                    {
                        "function": "max_date(Data column)",
                        "result": "20 Oct 2020"
                    }
                ]
            }
        },
        {
            "parentName": "min",
            "funcName": "min_date",
            "displayName": "Min Date",
            "args": 1,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Parameter must be a Date column or a Datetime column."
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the minimum date value from a Date or a Datetime column.",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018, 17 Nov 2019, 20 Oct 2020"
                ],
                "functions": [
                    {
                        "function": "min_date(Data column)",
                        "result": "06 Dec 2018"
                    }
                ]
            }
        },
        {
            "parentName": "sum",
            "funcName": "sum",
            "displayName": "Sum",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric column, or a list of numbers"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the sum of the values in the given column",
            "examples": {
                "columns": [
                    "marks: 45, 33, 56, 70"
                ],
                "functions": [
                    {
                        "function": "sum(marks)",
                        "result": "205"
                    }
                ]
            }
        },
        {
            "parentName": "mode",
            "funcName": "mode",
            "displayName": "Mode",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric column"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the most occurring value in the column",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 30, 60, 30, 80, 90"
                ],
                "functions": [
                    {
                        "function": "mode('ticket_count');",
                        "result": "30"
                    }
                ]
            }
        },
        {
            "parentName": "count",
            "funcName": "count",
            "displayName": "Count",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "col",
                    "argDesc": "Parameter must be a column"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the total number of values in the column. Null values (empty cells) are ignored.",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "count(ticket_count);",
                        "result": "7"
                    }
                ]
            }
        },
        {
            "parentName": "count",
            "funcName": "count_wb",
            "displayName": "Count with Blanks",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "col",
                    "argDesc": "Parameter must be a column"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the total number of values in the column including null values (empty cells).",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50,  , 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "count_wb(ticket_count);",
                        "result": "7"
                    }
                ]
            }
        },
        {
            "parentName": "variance",
            "funcName": "variance",
            "displayName": "Variance",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a numeric group of values such as a Number column."
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the variance calculated from values of a group in a number format.",
            "examples": {
                "columns": [
                    "ticket_count:  30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "variance(ticket_count)",
                        "result": "466.66"
                    }
                ]
            }
        },
        {
            "parentName": "stddev",
            "funcName": "stddev",
            "displayName": "Standard Deviation",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a numeric value or a Number column."
                }
            ],
            "funcType": "aggregate",
            "isFormatted": false,
            "description": "Returns the standard deviation calculated from the input values.",
            "examples": {
                "columns": [
                    "Score: 10,20,30,40,50,60"
                ],
                "functions": [
                    {
                        "function": "stddev(Score)",
                        "result": "18.70"
                    }
                ]
            }
        },
        {
            "parentName": "bin",
            "funcName": "bin",
            "displayName": "Binary",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "param",
                    "argDesc": "Parameter must be a numeric value or a numeric column or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "description": "Returns the binary representation of a number.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "bin('111')",
                        "result": "1101111"
                    }
                ]
            }
        },
        {
            "parentName": "cbrt",
            "funcName": "cbrt",
            "displayName": "Cube Root",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number, or a numeric column or an expression that results in a numeric value."
                }
            ],
            "funcType": "math",
            "description": "Returns the cube root of the number.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "cbrt('27')",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "ceil",
            "funcName": "ceil",
            "displayName": "Ceiling",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number, or a numeric column or an expression that results a numeric value."
                }
            ],
            "funcType": "math",
            "description": "Returns the smallest integer value that is bigger than or equal to a number.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "ceil('25.75')",
                        "result": "26"
                    }
                ]
            }
        },
        {
            "parentName": "char",
            "funcName": "char",
            "displayName": "Character",
            "args": -1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "param",
                    "argDesc": "Accepts multiple parameters. Each parameter must be a number, a numeric column, or an expression that returns a number.",
                    "is_vararg": true
                }
            ],
            "funcType": "string",
            "description": "Returns the ASCII character having the binary equivalent to the parameter. If n is larger than 256 the result is equivalent to char(n % 256). Represents 128 characters with values ranging from 0 to 127 (decimal) or 00 to 7F (hexadecimal). Includes control characters (0-31 and 127), punctuation, digits (0-9), and uppercase and lowercase English letters. The first 32 characters (0-31) are non-printable control codes, used for device control. While the standard ASCII table has 128 characters, the concept of extended ASCII expands the range to 256 characters (0-255)",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "char('65')",
                        "result": "A"
                    },
                    {
                        "function": "char('65', '66', '67')",
                        "result": "ABC"
                    },
                    {
                        "function": "char('33', '289')",
                        "result": "!!"
                    },
                    {
                        "function": "char('33', '64', '60', '80', '100')",
                        "result": "!@<Pd"
                    },
                    {
                        "function": "char('33', '64', 60, 80, 100)",
                        "result": "!@<Pd"
                    },
                    {
                        "function": "char('sgr', 60, 80, '100')",
                        "result": " ",
                        "error": true
                    },
                    {
                        "function": "char('d', 'a', 't', 'a')",
                        "result": " ",
                        "error": true
                    }
                ]
            }
        },
        {
            "parentName": "concat",
            "funcName": "concat",
            "displayName": "Concat",
            "args": -1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "Parameters must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "Parameters must be a Text or a Text column, or an expression that returns a Text.",
                    "is_vararg": true
                }
            ],
            "funcType": "string",
            "description": "Returns the concatenated text of the given parameters. Returns null, if any one of the parameters is null.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "concat(\"NOW\", \"HERE\")",
                        "result": "NOWHERE"
                    }
                ]
            }
        },
        {
            "parentName": "concat_ws",
            "funcName": "concat_ws",
            "displayName": "Concat with Separator",
            "args": -1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "The first of the params is considered as the separator, using which the rest of the consecutive arguments will be concatenated."
                },
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "The first of the params is considered as the separator, using which the rest of the consecutive arguments will be concatenated."
                },
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "The first of the params is considered as the separator, using which the rest of the consecutive arguments will be concatenated.",
                    "is_vararg": true
                }
            ],
            "funcType": "string",
            "description": "Returns the concatenated text of the given parameters along with the separator. Returns null, if any one of the parameter is null.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "concat_ws('_', 'NOW', 'HERE')",
                        "result": "NOW_HERE"
                    },
                    {
                        "function": "concat_ws('_', 'NOW', 'HERE', 'IT', 'IS')",
                        "result": "NOW_HERE_IT_IS"
                    },
                    {
                        "function": "concat_ws('_', 'NOW')",
                        "result": " ",
                        "error": true
                    }
                ]
            }
        },
        {
            "parentName": "conv",
            "funcName": "conv",
            "displayName": "Convert",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a number or a number column, or an expression that returns a number."
                },
                {
                    "argType": "decimal",
                    "argName": "from_base",
                    "argDesc": "The base value to be converted from."
                },
                {
                    "argType": "decimal",
                    "argName": "to_base",
                    "argDesc": "The base value to be converted to."
                }
            ],
            "funcType": "math",
            "description": "This function converts the number from 'from base' to 'to base'.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "conv(100, 2, 10)",
                        "result": "4"
                    },
                    {
                        "function": "conv(100, 2)",
                        "result": " ",
                        "error": true
                    },
                    {
                        "function": "conv(100, 2, 10, 20)",
                        "result": " ",
                        "error": true
                    },
                    {
                        "function": "conv(100, 2, 's')",
                        "result": " ",
                        "error": true
                    }
                ]
            }
        },
        {
            "parentName": "date",
            "funcName": "current_date",
            "displayName": "Current Date",
            "args": 0,
            "resultantType": "date",
            "argTypes": [],
            "funcType": "date",
            "description": "Returns the current date as a date value. Function accepts no parameters.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "current_date()",
                        "result": "09/21/2019"
                    }
                ]
            }
        },
        {
            "parentName": "datetime",
            "funcName": "current_timestamp",
            "displayName": "Current Timestamp",
            "args": 0,
            "resultantType": "datetime",
            "argTypes": [],
            "funcType": "date",
            "description": "Returns the current timestamp as a Datetime value. Function accepts no parameters.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "current_timestamp()",
                        "result": "09/19/2019 19:18:55"
                    }
                ]
            }
        },
        {
            "parentName": "date_format",
            "funcName": "date_format",
            "displayName": "Date Format",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column to change the format."
                },
                {
                    "argType": "string",
                    "argName": "format",
                    "argDesc": "Specifies the format in which the date should be returned by the function."
                }
            ],
            "funcType": "date",
            "description": "Converts the Datetimestamp to the format specified in the parameter.",
            "examples": {
                "columns": [
                    "Data column: 2017-06-15"
                ],
                "functions": [
                    {
                        "function": "date_format(Data column, \"dd MMM, yyyy\")",
                        "result": "15 June, 2017"
                    }
                ]
            }
        },
        {
            "parentName": "dayofmonth",
            "funcName": "day_of_month",
            "displayName": "Day of Month",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the day of month of the date.",
            "examples": {
                "columns": [
                    "Data column: 2009-03-24"
                ],
                "functions": [
                    {
                        "function": "day_of_month(Data column)",
                        "result": "24"
                    }
                ]
            }
        },
        {
            "parentName": "dayofweek",
            "funcName": "day_of_week",
            "displayName": "Day of Week",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the day of the week for the given date. [1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday]",
            "examples": {
                "columns": [
                    "Data column: 06-12-2018"
                ],
                "functions": [
                    {
                        "function": "day_of_week(Data column)",
                        "result": "5"
                    }
                ]
            }
        },
        {
            "parentName": "weekday",
            "funcName": "weekday",
            "displayName": "Day of the Week in number",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Parameter must be a Date column or a Datetime column"
                }
            ],
            "funcType": "date",
            "description": "Returns the day of the week from the given date",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018"
                ],
                "functions": [
                    {
                        "function": "weekday(Data column);",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "dayofweek_name",
            "funcName": "day_of_week_name",
            "displayName": "Day of the Week in name",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the day of the week (as name) for the given date.",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018"
                ],
                "functions": [
                    {
                        "function": "day_of_week_name(Data column)",
                        "result": "Thursday"
                    }
                ]
            }
        },
        {
            "parentName": "dayofyear",
            "funcName": "day_of_year",
            "displayName": "Day of the Year",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the day of year (in number) of the date/timestamp.",
            "examples": {
                "columns": [
                    "Data column: 25-03-2009"
                ],
                "functions": [
                    {
                        "function": "day_of_year(Data column)",
                        "result": "84"
                    }
                ]
            }
        },
        {
            "parentName": "decode",
            "funcName": "decode",
            "displayName": "Decode",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "charset",
                    "argDesc": "Specifies the character set such as UTF-8, ASCII, UTF-10, etc."
                }
            ],
            "funcType": "string",
            "description": "Returns the decoded value of the first argument using the second argument character set (UTF-8, ASCII, UTF-10, etc.).",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "decode(\"ABC\", \"UTF-8\")",
                        "result": "ABC"
                    }
                ]
            }
        },
        {
            "parentName": "degrees",
            "funcName": "degrees",
            "displayName": "Degrees",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Specifies the angle in radians."
                }
            ],
            "funcType": "math",
            "isFormatted": false,
            "description": "Converts radians to degrees.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "degrees(3.141592653589793)",
                        "result": "180.0"
                    }
                ]
            }
        },
        {
            "parentName": "encode",
            "funcName": "encode",
            "displayName": "Encode",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "charset",
                    "argDesc": "Specifies the character set. 'US-ASCII', 'ISO-8859-1', 'UTF-8', 'UTF-16BE', 'UTF-16LE', 'UTF-16' are the supported character sets."
                }
            ],
            "funcType": "string",
            "description": "Returns the encoded value of the first argument using the second argument character set (utf-8, ascii, utf-10, etc.).",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "encode(\"ABC\", \"UTF-8\")",
                        "result": "ABC"
                    }
                ]
            }
        },
        {
            "parentName": "exp",
            "funcName": "exp",
            "displayName": "Exponential",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "isFormatted": false,
            "description": "Returns the exponential value of the given number. This value is the exponent (e) raised to the power specified as the parameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "exp(1)",
                        "result": "2.718281828"
                    }
                ]
            }
        },
        {
            "parentName": "floor",
            "funcName": "floor",
            "displayName": "Floor",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "description": "Returns the largest integer that is less than or equal to the given parameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "floor(-0.1)",
                        "result": "-1"
                    }
                ]
            }
        },
        {
            "parentName": "greatest",
            "funcName": "greatest",
            "displayName": "Greatest",
            "args": -1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "params",
                    "argDesc": "Supports multiple parameters, The parameters must be a number column, or a list of numbers or an expression that returns a list of numbers."
                },
                {
                    "argType": "decimal",
                    "argName": "params",
                    "argDesc": "Supports multiple parameters, The parameters must be a number column, or a list of numbers or an expression that returns a list of numbers.",
                    "is_vararg": true
                }
            ],
            "funcType": "math",
            "description": "Returns the largest value from a group of values.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "greatest(10, 9, 2, 4, 3)",
                        "result": "10"
                    }
                ]
            }
        },
        {
            "parentName": "hex",
            "funcName": "hex",
            "displayName": "Hexadecimal",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter can be any value or a column of Number, Text, or Boolean data type."
                }
            ],
            "funcType": "math",
            "description": "Returns the hexadecimal value of the given parameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "hex(17)",
                        "result": "11"
                    }
                ]
            }
        },
        {
            "parentName": "hour",
            "funcName": "hour",
            "displayName": "Hour",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the hour component of the timestamp.",
            "examples": {
                "columns": [
                    "Data column: 2009-03-07 20:18:34:543"
                ],
                "functions": [
                    {
                        "function": "hour(Data column)",
                        "result": "20"
                    }
                ]
            }
        },
        {
            "parentName": "if",
            "funcName": "if",
            "displayName": "If",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "An expression that returns a Boolean."
                },
                {
                    "argType": "string",
                    "argName": "param1",
                    "argDesc": "Parameter can be any value or a column of any type."
                },
                {
                    "argType": "string",
                    "argName": "param2",
                    "argDesc": "Parameter can be any value or a column of any type."
                }
            ],
            "funcType": "logical",
            "description": "If the condition is true, then returns param1; otherwise returns param2.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "if(1 < 2, 'a', 'b')",
                        "result": "a"
                    }
                ]
            }
        },
        {
            "parentName": "ifnull",
            "funcName": "if_null",
            "displayName": "If Null",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param1",
                    "argDesc": "Parameter can be any value or a column of any type."
                },
                {
                    "argType": "string",
                    "argName": "param2",
                    "argDesc": "Parameter can be any value or a column of any type."
                }
            ],
            "funcType": "logical",
            "description": "Returns param2 if param1 is null, returns param1 otherwise.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "if_null(null, 'b')",
                        "result": "b"
                    }
                ]
            }
        },
        {
            "parentName": "initcap",
            "funcName": "initcap",
            "displayName": "Initcap",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns the text with the first letter of each word in uppercase. All other letters are in lowercase. Words are delimited by white space.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "initcap('zoho one is an operating system for your business')",
                        "result": "Zoho One Is An Operating System For Your Business"
                    }
                ]
            }
        },
        {
            "parentName": "is_null",
            "funcName": "is_null",
            "displayName": "Is Null",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter can be a column, or an expression"
                }
            ],
            "funcType": "logical",
            "description": "Returns true if the expression or column value is null or empty",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "is_null(null)",
                        "result": "true"
                    },
                    {
                        "function": "is_null('A')",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "is_not_null",
            "funcName": "is_not_null",
            "displayName": "Is not Null",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter can be a column, or an expression"
                }
            ],
            "funcType": "logical",
            "description": "Returns true if the column value or expression is not null or empty",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "is_not_null(null)",
                        "result": "false"
                    },
                    {
                        "function": "is_not_null('A')",
                        "result": "true"
                    }
                ]
            }
        },
        {
            "parentName": "not",
            "funcName": "not",
            "displayName": "Not",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "boolean",
                    "argName": "param",
                    "argDesc": "Specifies a Boolean value on which the not logical operation is to be applied on."
                }
            ],
            "funcType": "logical",
            "description": "Applies the NOT logical operation on the column. Returns the opposite value of the Boolean value specified.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "not(5 > 3)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "last_day",
            "funcName": "last_day",
            "displayName": "Last Day of the Month",
            "args": 1,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the last day of the month mentioned in the given date.",
            "examples": {
                "columns": [
                    "Data column: 2016-04-09"
                ],
                "functions": [
                    {
                        "function": "last_day(Data column)",
                        "result": "2016-04-30"
                    }
                ]
            }
        },
        {
            "parentName": "least",
            "funcName": "least",
            "displayName": "Least",
            "args": -1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "params",
                    "argDesc": "Requires a minimum of two parameters which can be a number column, or a list of numbers, or an expression that returns a list of numbers."
                },
                {
                    "argType": "decimal",
                    "argName": "params",
                    "argDesc": "Requires a minimum of two parameters which can be a number column, or a list of numbers, or an expression that returns a list of numbers.",
                    "is_vararg": true
                }
            ],
            "funcType": "math",
            "description": "Returns the least value of all, skipping the null values.",
            "examples": {
                "columns": [
                    "Age: [20, 21, 24, 45, 46, 54, 60, 61, 63]",
                    "Weight: [123, 145, 160, 155, 200, 50, 134, 55, 60]"
                ],
                "functions": [
                    {
                        "function": "least('Age', 'Weight')",
                        "result": "20, 21, 24, 45, 46, 50, 60, 55, 60"
                    }
                ]
            }
        },
        {
            "parentName": "left",
            "funcName": "left",
            "displayName": "Left",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "number",
                    "argName": "length",
                    "argDesc": "length must be a number or a column of Number type."
                }
            ],
            "funcType": "string",
            "description": "Returns the leftmost 'length' of characters from the first parameter, if the length is less than or equal to 0 the result is an empty text.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "left(\"NOWHERE\", 3)",
                        "result": "NOW"
                    }
                ]
            }
        },
        {
            "parentName": "length",
            "funcName": "length",
            "displayName": "Length",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "general",
            "description": "Returns the character length of the text parameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "length(\"NOWHERE\")",
                        "result": "7"
                    }
                ]
            }
        },
        {
            "parentName": "ln",
            "funcName": "ln",
            "displayName": "Logarithm",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number, a numeric column or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "description": "Returns the natural logarithm (base e) of the given parameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "ln('1')",
                        "result": "0"
                    }
                ]
            }
        },
        {
            "parentName": "log",
            "funcName": "log",
            "displayName": "Log",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "base",
                    "argDesc": "Indicates the base of the logarithm function. Parameter must be a number, a numeric column or an expression that returns a number."
                },
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number, a numeric column or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "description": "Returns the logarithm of parameter given. This function also accepts custom base value for the logarithm.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "log(10,100)",
                        "result": "2"
                    }
                ]
            }
        },
        {
            "parentName": "log10",
            "funcName": "log10",
            "displayName": "Log10",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number, a numeric column or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "description": "Returns the logarithm (base 10) of the parameter given.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "log10('10.0')",
                        "result": "1"
                    }
                ]
            }
        },
        {
            "parentName": "log2",
            "funcName": "log2",
            "displayName": "Log2",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number, a numeric column or an expression that returns a number."
                }
            ],
            "funcType": "math",
            "description": "Returns the logarithm (base 2) of parameter given.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "log2('2.0')",
                        "result": "1"
                    }
                ]
            }
        },
        {
            "parentName": "lower",
            "funcName": "lower",
            "displayName": "Lower",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Specifies the Text that needs to be converted with lower case for each character. The parameter can be a text value, a text column or an expression that results in a text value."
                }
            ],
            "funcType": "string",
            "description": "The LOWER function returns the given text with lower case for each character.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "lower(\"Zoho, Your Life's Work, Powered By Our Life's Work!\")",
                        "result": "zoho, your life's work, powered by our life's work!"
                    }
                ]
            }
        },
        {
            "parentName": "ltrim",
            "funcName": "ltrim",
            "displayName": "Leading Trim",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Removes the leading white space characters from the text.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "ltrim(\"        Zoho\")",
                        "result": "Zoho"
                    }
                ]
            }
        },
        {
            "parentName": "minute",
            "funcName": "minute",
            "displayName": "Minute",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the minute component of the timestamp.",
            "examples": {
                "columns": [
                    "Data column: 2009-07-30 12:58:59"
                ],
                "functions": [
                    {
                        "function": "minute(Data column)",
                        "result": "58"
                    }
                ]
            }
        },
        {
            "parentName": "minuteofday",
            "funcName": "minute_of_day",
            "displayName": "Minute of the Day",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the minute component of the day from the timestamp.",
            "examples": {
                "columns": [
                    "Data column: 2009-07-30 12 58 59"
                ],
                "functions": [
                    {
                        "function": "minute_of_day(Data column)",
                        "result": "778"
                    }
                ]
            }
        },
        {
            "parentName": "minuteofhour",
            "funcName": "minute_of_hour",
            "displayName": "Minute of the Hour",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the minute component of an hour from the timestamp.",
            "examples": {
                "columns": [
                    "Data column: 2009-07-30 12 58 59"
                ],
                "functions": [
                    {
                        "function": "minute_of_hour(Data column)",
                        "result": "58"
                    }
                ]
            }
        },
        {
            "parentName": "millisecondofday",
            "funcName": "millisecond_of_day",
            "displayName": "Millisecond of the Day",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the millisecond of a day from the timestamp.",
            "examples": {
                "columns": [
                    "Data column: 2009-07-30 00 03 00"
                ],
                "functions": [
                    {
                        "function": "millisecond_of_day(Data column)",
                        "result": "180000"
                    }
                ]
            }
        },
        {
            "parentName": "millisecondofsecond",
            "funcName": "millisecond_of_second",
            "displayName": "Millisecond of Second",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the millisecond of a second from the timestamp.",
            "examples": {
                "columns": [
                    "Data column: 2009-07-30 12 58 59 850"
                ],
                "functions": [
                    {
                        "function": "millisecond_of_second(Data column)",
                        "result": "850"
                    }
                ]
            }
        },
        {
            "parentName": "isleapyear",
            "funcName": "is_leap_year",
            "displayName": "Is Leap Year",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column ."
                }
            ],
            "funcType": "date",
            "description": "Returns true for a leap year and false otherwise.",
            "examples": {
                "columns": [
                    "Data column: 2016-04-09"
                ],
                "functions": [
                    {
                        "function": "is_leap_year(Date column)",
                        "result": "true"
                    }
                ]
            }
        },
        {
            "parentName": "mod",
            "funcName": "mod",
            "displayName": "Mod",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param1",
                    "argDesc": "Parameter must be a numeric value which is the numerator used in the numeric division."
                },
                {
                    "argType": "decimal",
                    "argName": "param2",
                    "argDesc": "Parameter must be a numeric value which is the denominator used in the numeric division."
                }
            ],
            "funcType": "math",
            "description": "Returns the remainder after performing numeric division on two numbers.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "mod('7','5')",
                        "result": "2"
                    }
                ]
            }
        },
        {
            "parentName": "month",
            "funcName": "month",
            "displayName": "Month",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Extracts month from the date/timestamp.",
            "examples": {
                "columns": [
                    "Data column: Nov 04, 2016"
                ],
                "functions": [
                    {
                        "function": "month(Data column)",
                        "result": "11"
                    }
                ]
            }
        },
        {
            "parentName": "month_name",
            "funcName": "month_name",
            "displayName": "Month as Name",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the month's name of the date/timestamp.",
            "examples": {
                "columns": [
                    "Data column: 1997-02-28"
                ],
                "functions": [
                    {
                        "function": "month_name(Data column)",
                        "result": "February"
                    }
                ]
            }
        },
        {
            "parentName": "month_year",
            "funcName": "month_year",
            "displayName": "Month and Year",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the month name of the date/timestamp along with the year.",
            "examples": {
                "columns": [
                    "Data column: 1997-02-28"
                ],
                "functions": [
                    {
                        "function": "month_year(Data column)",
                        "result": "February, 1997"
                    }
                ]
            }
        },
        {
            "parentName": "months_between",
            "funcName": "months_between",
            "displayName": "Months in-between",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date1",
                    "argDesc": "Specifies a Date column or a Datetime column from which the difference in months is to be determined."
                },
                {
                    "argType": "datetime",
                    "argName": "date2",
                    "argDesc": "Specifies a Date column or a Datetime column from which the difference in months is to be determined."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of months between the two specified dates.",
            "examples": {
                "columns": [
                    "Data column 1: 1997-02-28",
                    "Data column 2: 1997-10-28"
                ],
                "functions": [
                    {
                        "function": "months_between('Data column 1', 'Data column 2')",
                        "result": "8"
                    }
                ]
            }
        },
        {
            "parentName": "negative",
            "funcName": "negative",
            "displayName": "Negative",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Specifies a number value that is to be negated."
                }
            ],
            "funcType": "math",
            "description": "Returns the negated value of the number mentioned in param.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "negative('1')",
                        "result": "-1"
                    }
                ]
            }
        },
        {
            "parentName": "pi",
            "funcName": "pi",
            "displayName": "Pi",
            "args": 0,
            "resultantType": "decimal",
            "argTypes": [],
            "funcType": "math",
            "description": "Returns the Pi value. The number π is a mathematical constant. It is defined as the ratio of a circle's circumference to its diameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "pi()",
                        "result": "3.1415926536"
                    }
                ]
            }
        },
        {
            "parentName": "pow",
            "funcName": "pow",
            "displayName": "Power",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param1",
                    "argDesc": "Specifies the number which is to be raised to a certain power."
                },
                {
                    "argType": "decimal",
                    "argName": "param2",
                    "argDesc": "Specifies the number which represents the power that the number is to be raised to."
                }
            ],
            "funcType": "math",
            "description": "Raises a number to the power that is specified by a number.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "pow('2', '3')",
                        "result": "8"
                    }
                ]
            }
        },
        {
            "parentName": "quarter",
            "funcName": "quarter",
            "displayName": "Quarter",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Extract quarter of the year, in the range 1 to 4 from the date.",
            "examples": {
                "columns": [
                    "Data column: 2016-08-31"
                ],
                "functions": [
                    {
                        "function": "quarter(Data column)",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "quarter_name",
            "funcName": "quarter_name",
            "displayName": "Quarter Name",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Extract quarter of the year, in the range 1 to 4, with the name of the year from date.",
            "examples": {
                "columns": [
                    "Data column: 2016-08-31"
                ],
                "functions": [
                    {
                        "function": "quarter_name(Data column)",
                        "result": "Q3"
                    }
                ]
            }
        },
        {
            "parentName": "quarter_year",
            "funcName": "quarter_year",
            "displayName": "Quarter Year",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Extract quarter of the year, in the range 1 to 4, with the year from the date.",
            "examples": {
                "columns": [
                    "Data column: 2016-08-31"
                ],
                "functions": [
                    {
                        "function": "quarter_year(Data column)",
                        "result": "Q3, 2016"
                    }
                ]
            }
        },
        {
            "parentName": "radians",
            "funcName": "radians",
            "displayName": "Radians",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "angle in degrees"
                }
            ],
            "funcType": "math",
            "description": "Converts angle in degrees to radian on the column.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "radians(180)",
                        "result": "3.1415926536"
                    }
                ]
            }
        },
        {
            "parentName": "random",
            "funcName": "random",
            "displayName": "Random",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num1",
                    "argDesc": "Specifies the starting number for the range from which a random number is returned."
                },
                {
                    "argType": "decimal",
                    "argName": "num2",
                    "argDesc": "Specifies the ending number for the range from which a random number is returned."
                }
            ],
            "funcType": "math",
            "description": "Generates a random integer value, between the given numbers, in the column.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "random('0', '4')",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "regexp_extract",
            "funcName": "regexp_extract",
            "displayName": "Regex Extract",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "regexp",
                    "argDesc": "Parameter must be a regular expression pattern passed as a Text."
                },
                {
                    "argType": "number",
                    "argName": "groupIdx",
                    "argDesc": "Paramter must be an integer which indicates the index of the group that needs to be extracted.",
                    "isOptional": true,
                    "defaultValue": 0
                }
            ],
            "funcType": "string",
            "description": "Extracts a group that matches regex expression.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "regexp_extract(\"100abc\", \"\\\\d+\" , 0)",
                        "result": "100"
                    },
                    {
                        "function": "regexp_extract( \"100-abc\" , \"(\\\\d+)-([a-zA-Z]+)\" , 2)",
                        "result": "abc"
                    }
                ]
            }
        },
        {
            "parentName": "regexp_replace",
            "funcName": "regexp_replace",
            "displayName": "Regex Replace",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "regex",
                    "argDesc": "Parameter must be a Text specifying the regular expression."
                },
                {
                    "argType": "string",
                    "argName": "replace_with",
                    "argDesc": "Parameter must be a Text specifying the regular expression."
                }
            ],
            "funcType": "string",
            "description": "Replaces all the subtexts of a text 'str' that matches the regex with the text mentioned in 'replace_with'.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "regexp_replace(\"100-200\", \"(\\\\d+)\", 'num')",
                        "result": "num-num"
                    }
                ]
            }
        },
        {
            "parentName": "replace",
            "funcName": "replace",
            "displayName": "Replace",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "search",
                    "argDesc": "A Text expression. If search is not found in str, str is returned unchanged."
                },
                {
                    "argType": "string",
                    "argName": "replace",
                    "argDesc": "A Text expression. If replace is not specified or is an empty text, nothing replaces the text that is removed from str."
                }
            ],
            "funcType": "string",
            "description": "Replaces all occurrences of search with the provided replacement text.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "replace('ABCabc', 'abc', 'DEF')",
                        "result": "ABCDEF"
                    }
                ]
            }
        },
        {
            "parentName": "reverse",
            "funcName": "reverse",
            "displayName": "Reverse",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns the reversed version of the given text.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "reverse('Zoho One')",
                        "result": "enO ohoZ"
                    }
                ]
            }
        },
        {
            "parentName": "right",
            "funcName": "right",
            "displayName": "Right",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "number",
                    "argName": "len",
                    "argDesc": "Specifies the number of characters from the right of the Text to be returned."
                }
            ],
            "funcType": "string",
            "description": "Returns the rightmost length `len` of characters from the text `str`. If the length is less than or equal to 0 the result is an empty text.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "right('Zoho One', '3')",
                        "result": "One"
                    }
                ]
            }
        },
        {
            "parentName": "round",
            "funcName": "round_num",
            "displayName": "Round Number",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Specifies the number column or the exact decimal number to be rounded off to the nearest value."
                },
                {
                    "argType": "number",
                    "argName": "d",
                    "argDesc": "Specifies the number column or the exact number of decimal places that the number should be rounded off to."
                }
            ],
            "funcType": "math",
            "description": "Returns a decimal number rounded to a specified number of decimal places using HALF_EVEN rounding mode.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "round_num('2.5', '0')",
                        "result": "2"
                    },
                    {
                        "function": "round_num('5.5', '0')",
                        "result": "6"
                    },
                    {
                        "function": "round_num('3.2', '0')",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "rtrim",
            "funcName": "rtrim",
            "displayName": "Right Trim",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Removes the trailing space characters from the provided text value.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "rtrim('Zoho One   ')",
                        "result": "Zoho One"
                    }
                ]
            }
        },
        {
            "parentName": "second",
            "funcName": "second",
            "displayName": "Second",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the seconds component of the date time. The function also supports unix timestamp in milliseconds as the input.",
            "examples": {
                "columns": [
                    "Data column: 2009-07-30 12:58:59"
                ],
                "functions": [
                    {
                        "function": "second(Data column)",
                        "result": "59"
                    }
                ]
            }
        },
        {
            "parentName": "secondofday",
            "funcName": "second_of_day",
            "displayName": "Second of the Day",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the second component of a day from the timestamp. The function also supports unix timestamp in milliseconds as the input.",
            "examples": {
                "columns": [
                    "Data column: 2009-07-30 00 11 00"
                ],
                "functions": [
                    {
                        "function": "second_of_day(Data column)",
                        "result": "660"
                    }
                ]
            }
        },
        {
            "parentName": "sha",
            "funcName": "sha",
            "displayName": "SHA1",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "general",
            "description": "Returns a sha1 hash value as a hex text of the param.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "sha('Zoho One')",
                        "result": "a74457c58f9d3e564bf534d96e1d85d6e513dac4"
                    }
                ]
            }
        },
        {
            "parentName": "soundex",
            "funcName": "soundex",
            "displayName": "Soundex",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns the Soundex code of the text values in the column.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "soundex('Miller')",
                        "result": "M460"
                    }
                ]
            }
        },
        {
            "parentName": "sqrt",
            "funcName": "sqrt",
            "displayName": "Square Root",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "param",
                    "argDesc": "Parameter must be a number or an expression that results in a numeric value or a Number column."
                }
            ],
            "funcType": "math",
            "description": "Returns the square root of the values on the column.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "sqrt('64')",
                        "result": "8"
                    }
                ]
            }
        },
        {
            "parentName": "substr",
            "funcName": "substr",
            "displayName": "Substring",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "sentence",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "number",
                    "argName": "pos",
                    "argDesc": "Parameter must be a number representing the index of the starting position of the text to be extracted."
                },
                {
                    "argType": "number",
                    "isOptional": true,
                    "argName": "len",
                    "argDesc": "Parameter must be a number representing the length of the text to be extracted from the 'sentence'",
                    "defaultValue": null
                }
            ],
            "funcType": "string",
            "description": "Returns the subtext of the sentence text that starts at a position index and is of a given length.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "substr('Zoho One', '4', '1')",
                        "result": "o"
                    }
                ]
            }
        },
        {
            "parentName": "trim",
            "funcName": "trim",
            "displayName": "Trim",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter can be a column of any datatype."
                }
            ],
            "funcType": "string",
            "description": "Removes the leading and trailing space characters from the text values in the column.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "trim('    Zoho One   ')",
                        "result": "Zoho One"
                    }
                ]
            }
        },
        {
            "parentName": "upper",
            "funcName": "upper",
            "displayName": "Upper",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text with all of the characters changed to uppercase.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "upper('Zoho One')",
                        "result": "ZOHO ONE"
                    }
                ]
            }
        },
        {
            "parentName": "weekofyear",
            "funcName": "week_of_year",
            "displayName": "Week of the Year",
            "args": 3,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "number",
                    "isOptional": true,
                    "argName": "startDay",
                    "argDesc": "Specifies the starting day of the week. The value range from 1 to 7 in this order. [1 = Sunday, 2 = Monday, 3 = Tuesday, 4 = Wednesday, 5 = Thursday, 6 = Friday, 7 = Saturday]. The default value is 1.",
                    "defaultValue": 1
                },
                {
                    "argType": "number",
                    "isOptional": true,
                    "defaultValue": 1,
                    "argName": "week_mode",
                    "argDesc": "Week mode determines how the function works. Values allowed are '1' (ISO Week Mode - Minimal 4 days), '2' (week starts from January 1st of the calendar year). The default value is 1."
                }
            ],
            "funcType": "date",
            "description": "Returns the week of year (in number) from the date or timestamp (a week is considered to start on a Monday and week 1 is the first week with more than 3 days).",
            "examples": {
                "columns": [
                    "Data column: 06/12/2018"
                ],
                "functions": [
                    {
                        "function": "week_of_year(Data column, 1, 1)",
                        "result": "49"
                    }
                ]
            }
        },
        {
            "parentName": "weekofmonth",
            "funcName": "week_of_month",
            "displayName": "Week of the Month",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies the Date or a Datetime."
                }
            ],
            "funcType": "date",
            "description": "Returns the week of the month of the given date.",
            "examples": {
                "columns": [
                    "Data column: 06/13/2018"
                ],
                "functions": [
                    {
                        "function": "week_of_month(Data column)",
                        "result": "Week 2"
                    }
                ]
            }
        },
        {
            "parentName": "weekofyear_with_year",
            "funcName": "week_of_year_with_year",
            "displayName": "Week of the Year with Year",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Parameter must be a Datetime column"
                },
                {
                    "argType": "number",
                    "isOptional": true,
                    "defaultValue": 1,
                    "argName": "startDay",
                    "argDesc": "Specifies the starting day of the week. The value range from 1 to 7 in this order. [1 = Sunday, 2 = Monday, 3 = Tuesday, 4 = Wednesday, 5 = Thursday, 6 = Friday, 7 = Saturday]. The default value is 1."
                },
                {
                    "argType": "number",
                    "isOptional": true,
                    "defaultValue": 1,
                    "argName": "week_mode",
                    "argDesc": "Week mode determines how the function works. Values allowed are '1' (ISO Week Mode - Minimal 4 days), '2' (week starts from January 1st of the calendar year). The default value is 1."
                }
            ],
            "funcType": "date",
            "description": "Returns the week of the year with year from the given date",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018, 17 Nov 2019"
                ],
                "functions": [
                    {
                        "function": "week_of_year_with_year(Data column, 1, 1)",
                        "result": "Week 49 2018, Week 46 2019"
                    }
                ]
            }
        },
        {
            "parentName": "year",
            "funcName": "year",
            "displayName": "Year",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Parameter must be a Date or a Datetime column"
                }
            ],
            "funcType": "date",
            "description": "Returns the year from the given date",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018 , 17 Nov 2019"
                ],
                "functions": [
                    {
                        "function": "year(Data column)",
                        "result": "2018, 2019"
                    }
                ]
            }
        },
        {
            "parentName": "century",
            "funcName": "century",
            "displayName": "Century",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Parameter must be of date type or a Datetime type."
                }
            ],
            "funcType": "date",
            "description": "Returns the century of the given Date or the Datetime input.",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018, 17 Nov 2019"
                ],
                "functions": [
                    {
                        "function": "century(Data column)",
                        "result": "21"
                    }
                ]
            }
        },
        {
            "parentName": "extract_date",
            "funcName": "extract_date",
            "displayName": "Extract Date",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Parameter must be of Datetime type or an expression that returns a Datetime."
                }
            ],
            "funcType": "date",
            "description": "Returns the date part from the given date column, or a Datetime column.",
            "examples": {
                "columns": [
                    "Data column: 2009-03-17 20 18 34 543"
                ],
                "functions": [
                    {
                        "function": "extract_date(Data column)",
                        "result": "2009-03-17"
                    }
                ]
            }
        },
        {
            "parentName": "extract_time",
            "funcName": "extract_time",
            "displayName": "Extract Time",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Parameter must be of Datetime type or an expression that returns a Datetime."
                }
            ],
            "funcType": "date",
            "description": "Returns the time part from the given Datetime column.",
            "examples": {
                "columns": [
                    "Data column: 2009-05-07 12 03 34"
                ],
                "functions": [
                    {
                        "function": "extract_time(Data column)",
                        "result": "12:03:34"
                    }
                ]
            }
        },
        {
            "parentName": "add_years",
            "funcName": "add_years",
            "displayName": "Add Years",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to increment."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_years",
                    "argDesc": "Specifies the number of years by which to increment the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Adds the specified number of years to the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 03/25/2009"
                ],
                "functions": [
                    {
                        "function": "add_years(Data column, '3')",
                        "result": "03/25/2012"
                    }
                ]
            }
        },
        {
            "parentName": "sub_years",
            "funcName": "sub_years",
            "displayName": "Subtract Years",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column or the exact date to decrement."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_years",
                    "argDesc": "Specifies the number of years by which to decrement the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Subtracts the specified number of years from the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 06/12/2018"
                ],
                "functions": [
                    {
                        "function": "sub_years(Data column, '3')",
                        "result": "06/12/2015"
                    }
                ]
            }
        },
        {
            "parentName": "diff_in_years",
            "funcName": "diff_in_years",
            "displayName": "Difference in Years",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "startDate",
                    "argDesc": "Specifies a Date column or a Datetime column,  the exact start date or an expression that results in a date value."
                },
                {
                    "argType": "datetime",
                    "argName": "endDate",
                    "argDesc": "Specifies a Date column or a Datetime column, the exact end date or an expression that results in a date value."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of years between startDate and endDate.",
            "examples": {
                "columns": [
                    "Data column 1: 2013-08-10",
                    "Data column 2: 2009-03-07"
                ],
                "functions": [
                    {
                        "function": "diff_in_years(Data column 1, Data column 2)",
                        "result": "4"
                    }
                ]
            }
        },
        {
            "parentName": "add_weeks",
            "funcName": "add_weeks",
            "displayName": "Add Weeks",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to increment."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_weeks",
                    "argDesc": "Specifies the number of weeks by which to increment the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Adds the specified number of weeks to the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 03/25/2009"
                ],
                "functions": [
                    {
                        "function": "add_weeks(Data column, '2')",
                        "result": "04/08/2009"
                    }
                ]
            }
        },
        {
            "parentName": "sub_weeks",
            "funcName": "sub_weeks",
            "displayName": "Subtract Weeks",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column or the exact date to decrement."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_weeks",
                    "argDesc": "Specifies the number of weeks by which to decrement the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Subtracts the specified number of weeks in the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 06/12/2018"
                ],
                "functions": [
                    {
                        "function": "sub_weeks(Data column, '2')",
                        "result": "11/22/2018"
                    }
                ]
            }
        },
        {
            "parentName": "diff_in_weeks",
            "funcName": "diff_in_weeks",
            "displayName": "Difference in Weeks",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "startDate",
                    "argDesc": "Specifies a Date column or a Datetime column, the exact start date or an expression that results in a date value."
                },
                {
                    "argType": "datetime",
                    "argName": "endDate",
                    "argDesc": "Specifies a Date column or a Datetime column, the exact end date or an expression that results in a date value."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of weeks between startDate and endDate.",
            "examples": {
                "columns": [
                    "Data column 1: 2009-08-10",
                    "Data column 2: 2009-09-17"
                ],
                "functions": [
                    {
                        "function": "diff_in_weeks(Data column 1, Data column 2)",
                        "result": "7"
                    }
                ]
            }
        },
        {
            "parentName": "add_months",
            "funcName": "add_months",
            "displayName": "Add Months",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_months",
                    "argDesc": "Specifies the number of months to add to the date value"
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Adds the specified number of months to the specified date value",
            "examples": {
                "columns": [
                    "Data column: 2009-11-25"
                ],
                "functions": [
                    {
                        "function": "add_months(Data column, `3`)",
                        "result": "2010-02-25"
                    }
                ]
            }
        },
        {
            "parentName": "sub_months",
            "funcName": "sub_months",
            "displayName": "Subtract Months",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_months",
                    "argDesc": "Specifies the number of months by which to decrement the date."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Subtracts the specified number of months from the given date value.",
            "examples": {
                "columns": [
                    "Data column: 19/12/2016"
                ],
                "functions": [
                    {
                        "function": "sub_months(Data column, '3')",
                        "result": "19/09/2016"
                    }
                ]
            }
        },
        {
            "parentName": "diff_in_months",
            "funcName": "diff_in_months",
            "displayName": "Difference in Months",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "startDate",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "datetime",
                    "argName": "endDate",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of months between startDate and endDate.",
            "examples": {
                "columns": [
                    "Data column 1: 2009-08-17",
                    "Data column 2: 2009-03-10"
                ],
                "functions": [
                    {
                        "function": "diff_in_months(Data column 1, Data column 2)",
                        "result": "5"
                    }
                ]
            }
        },
        {
            "parentName": "add_days",
            "funcName": "add_days",
            "displayName": "Add Days",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column to increment."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_days",
                    "argDesc": "Specifies the number of days by which to increment the dates."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Adds the specified number of days to the specified date value.",
            "examples": {
                "columns": [
                    "Data column: 12/25/2009"
                ],
                "functions": [
                    {
                        "function": "add_days(Data column, `30`)",
                        "result": "01/24/2010"
                    }
                ]
            }
        },
        {
            "parentName": "sub_days",
            "funcName": "sub_days",
            "displayName": "Subtract Days",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column to decrement."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_days",
                    "argDesc": "Specifies the number of days by which to decrement the date."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Subtracts the specified number of days from the specified date value.",
            "examples": {
                "columns": [
                    "Data column: 2009-12-25"
                ],
                "functions": [
                    {
                        "function": "sub_days(Data column, '5')",
                        "result": "2009-12-20"
                    }
                ]
            }
        },
        {
            "parentName": "timediff",
            "funcName": "diff_in_days",
            "displayName": "Difference in Days",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "startDate",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "datetime",
                    "argName": "endDate",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of days between startDate and endDate.",
            "examples": {
                "columns": [
                    "Data column 1: 2009-03-10",
                    "Data column 2: 2009-03-07"
                ],
                "functions": [
                    {
                        "function": "diff_in_days(Data column 1, Data column 2)",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "add_hours",
            "funcName": "add_hours",
            "displayName": "Add Hours",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to increment."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_hours",
                    "argDesc": "Specifies the number of hours by which the value will be incremented."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Adds the specified number of hours to the given Date column or a Datetime column.",
            "examples": {
                "columns": [
                    "Data column: 12/08/2018 07:58:59"
                ],
                "functions": [
                    {
                        "function": "add_hours(Data column, '3')",
                        "result": "12/08/2018 10:58:59"
                    }
                ]
            }
        },
        {
            "parentName": "sub_hours",
            "funcName": "sub_hours",
            "displayName": "Subtract Hours",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to decrement."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_hours",
                    "argDesc": "Specifies the number of hours by which to decrement the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Subtracts the specified number of hours from the given date value.",
            "examples": {
                "columns": [
                    "Data column: 1965-07-27 11 58 59"
                ],
                "functions": [
                    {
                        "function": "sub_hours(Data column, 3)",
                        "result": "1965-07-27 8:58:59"
                    }
                ]
            }
        },
        {
            "parentName": "diff_in_hours",
            "funcName": "diff_in_hours",
            "displayName": "Difference in Hours",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "startDateTimestamp",
                    "argDesc": "Specifies a Datetime column."
                },
                {
                    "argType": "datetime",
                    "argName": "endDateTimestamp",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of hours between startDate timestamp and endDate timestamp.",
            "examples": {
                "columns": [
                    "Data column 1: 2009-03-07 23 20 40 600",
                    "Data column 2: 2009-03-07 20 18 34 543"
                ],
                "functions": [
                    {
                        "function": "diff_in_hours(Data column 1, Data column 2)",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "add_minutes",
            "funcName": "add_minutes",
            "displayName": "Add Minutes",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to increment."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_minutes",
                    "argDesc": "Specifies the number of minutes by which to increment the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Adds the specified number of minutes to the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 12/08/2018 11:58:59"
                ],
                "functions": [
                    {
                        "function": "add_minutes(Data column, '2')",
                        "result": "12/08/2018 12:00:59"
                    }
                ]
            }
        },
        {
            "parentName": "sub_minutes",
            "funcName": "sub_minutes",
            "displayName": "Subtract Minutes",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to decrement."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_minutes",
                    "argDesc": "Specifies the number of minutes by which to decrement the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Subtracts the specified number of minutes from the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 2018-07-18 00 10 00"
                ],
                "functions": [
                    {
                        "function": "sub_minutes(Data column, 2)",
                        "result": "2018-07-18 00:08:00"
                    }
                ]
            }
        },
        {
            "parentName": "diff_in_minutes",
            "funcName": "diff_in_minutes",
            "displayName": "Difference in Minutes",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "startDateTimestamp",
                    "argDesc": "Specifies a Datetime column."
                },
                {
                    "argType": "datetime",
                    "argName": "endDateTimestamp",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of minutes between startDate timestamp and endDate timestamp.",
            "examples": {
                "columns": [
                    "Data column 1: 2009-03-07 20 20 34 600",
                    "Data column 2: 2009-03-07 20 18 34 543"
                ],
                "functions": [
                    {
                        "function": "diff_in_minutes(Data column1, Data column 2)",
                        "result": "2"
                    }
                ]
            }
        },
        {
            "parentName": "add_seconds",
            "funcName": "add_seconds",
            "displayName": "Add Seconds",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to increment."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_seconds",
                    "argDesc": "Specifies the number of seconds by which to increment the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Adds the specified number of seconds to the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 03/25/2009 11:58:49"
                ],
                "functions": [
                    {
                        "function": "add_seconds(Data column, '10')",
                        "result": "03/25/2009 11:58:59"
                    }
                ]
            }
        },
        {
            "parentName": "sub_seconds",
            "funcName": "sub_seconds",
            "displayName": "Subtract Seconds",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column to decrement."
                },
                {
                    "argType": "decimal",
                    "argName": "num_of_seconds",
                    "argDesc": "Specifies the number of seconds by which to decrement the timestamp value."
                }
            ],
            "funcType": "date",
            "flexible": true,
            "description": "Subtracts the specified number of seconds in the given Datetime value.",
            "examples": {
                "columns": [
                    "Data column: 06/12/2018 00 03 00"
                ],
                "functions": [
                    {
                        "function": "sub_seconds(Data column, '10')",
                        "result": "06/12/2018 00:02:50"
                    }
                ]
            }
        },
        {
            "parentName": "diff_in_seconds",
            "funcName": "diff_in_seconds",
            "displayName": "Difference in Seconds",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "startDateTimestamp",
                    "argDesc": "Specifies a Datetime column."
                },
                {
                    "argType": "datetime",
                    "argName": "endDateTimestamp",
                    "argDesc": "Specifies a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the number of milliseconds between startDate timestamp and endDate timestamp.",
            "examples": {
                "columns": [
                    "Data column 1: 2009-03-07 20 20 36 600",
                    "Data column 2: 2009-03-07 20 20 34 543"
                ],
                "functions": [
                    {
                        "function": "diff_in_seconds(Data column 1, Data column 2)",
                        "result": "02"
                    }
                ]
            }
        },
        {
            "parentName": "invert_case",
            "funcName": "invert_case",
            "displayName": "Invert Case",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns the text with all case inverted i.e. upper case is converted to lower case and vice versa.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "invert_case('Zoho One is an Operating System for your Business')",
                        "result": "zOHO oNE IS AN oPERATING sYSTEM FOR YOUR bUSINESS"
                    }
                ]
            }
        },
        {
            "parentName": "alternate_case",
            "funcName": "alternate_case",
            "displayName": "Alternate Case",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Specifies the Text that needs to be converted with alternate case for each character."
                }
            ],
            "funcType": "string",
            "description": "Returns a text with alternate lower and upper case for each character of the input text starting with lower case for the first character.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "alternate_case(\"Zoho, Your Life's Work, Powered By Our Life's Work!\")",
                        "result": "zOhO, yOuR LiFe's wOrK, pOwErEd bY OuR LiFe's wOrK!"
                    }
                ]
            }
        },
        {
            "parentName": "sentence_case",
            "funcName": "sentence_case",
            "displayName": "Sentence Case",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text of the values in the columns after applying the sentence case to it.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "sentence_case('welcome to the united states of america')",
                        "result": "\"Welcome to the united states of america\""
                    }
                ]
            }
        },
        {
            "parentName": "camel_case",
            "funcName": "camel_case",
            "displayName": "Camel Case",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns the text after applying the camel case to it.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "camel_case(\"Zoho one is an operating system for your business\")",
                        "result": "ZohoOneIsAnOperatingSystemForYourBusiness"
                    }
                ]
            }
        },
        {
            "parentName": "title_case",
            "funcName": "title_case",
            "displayName": "Title case",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text of the values in the columns after applying the title case to it. Title case means that the first letter of each word is capitalized, except for certain small words, such as articles and short prepositions",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "title_case('united states of america')",
                        "result": "United States of America"
                    }
                ]
            }
        },
        {
            "parentName": "lines_to_space",
            "funcName": "lines_to_space",
            "displayName": "Lines to Space",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text value where the new lines are converted to spaces.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "lines_to_space('Zoho\\nOne')",
                        "result": "Zoho One"
                    }
                ]
            }
        },
        {
            "parentName": "space_to_lines",
            "funcName": "space_to_lines",
            "displayName": "Space to Lines",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text value where the spaces are converted to new lines.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "space_to_lines('Zoho One')",
                        "result": "Zoho\\nOne"
                    }
                ]
            }
        },
        {
            "parentName": "tab_to_space",
            "funcName": "tab_to_space",
            "displayName": "Tab to Space",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text value where the tabs are converted to spaces.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "tab_to_space('Zoho\\tOne')",
                        "result": "Zoho One"
                    }
                ]
            }
        },
        {
            "parentName": "space_to_tab",
            "funcName": "space_to_tab",
            "displayName": "Space to Tab",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text value where the spaces are converted to tabs.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "space_to_tab('Zoho One')",
                        "result": "Zoho\\tOne"
                    }
                ]
            }
        },
        {
            "parentName": "to_single_space",
            "funcName": "to_single_space",
            "displayName": "To Single Space",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text with multiple spaces into a single space. The \\s given in the example is only a representation of the whitespace character. The input data should contain actual space.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "to_single_space('Zoho\\s\\s\\sOffice\\s\\sSuite')",
                        "result": "Zoho Office Suite"
                    }
                ]
            }
        },
        {
            "parentName": "to_single_tab",
            "funcName": "to_single_tab",
            "displayName": "To Single Tab",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text with multiple tab spaces into a sinlge tab space.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "to_single_tab('Zoho\\t\\t\\tOffice\\tSuiteSQL\\tOrg')",
                        "result": "Zoho\\tOffice\\tSuiteSQL\\tOrg"
                    }
                ]
            }
        },
        {
            "parentName": "remove_empty_lines",
            "funcName": "remove_empty_lines",
            "displayName": "Remove Empty Lines",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Removes all the empty lines in the column",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "remove_empty_lines('Zoho\\n\\n\\nOffice\\n\\nSuite')",
                        "result": "Zoho\\nOffice\\nSuite"
                    }
                ]
            }
        },
        {
            "parentName": "truncate_char",
            "funcName": "truncate_char",
            "displayName": "Truncate Character",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param1",
                    "argDesc": "Parameter can be a column of any datatype."
                },
                {
                    "argType": "number",
                    "argName": "param2",
                    "argDesc": "Specifies the number of characters to be removed from the Text. The value of the parameter should be smaller than the length of the Text."
                }
            ],
            "funcType": "string",
            "description": "Truncates a given number of characters from the input text value.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "truncate_char(Zoho One, 4)",
                        "result": "Zoho"
                    }
                ]
            }
        },
        {
            "parentName": "truncate_words",
            "funcName": "truncate_words",
            "displayName": "Truncate Words",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param1",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "number",
                    "argName": "param2",
                    "argDesc": "Specifies the number of words to be removed from the Text. The value of the parameter should be smaller than the number of words in the Text and greater than 0."
                }
            ],
            "funcType": "string",
            "description": "Truncates a given number of words from the input text value.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "truncate_words('Zoho One', 1)",
                        "result": "Zoho"
                    }
                ]
            }
        },
        {
            "parentName": "remove_space",
            "funcName": "remove_space",
            "displayName": "Remove Space",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Removes all the spaces in the column.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "remove_space('    Zoho One   ')",
                        "result": "\"ZohoOne\""
                    }
                ]
            }
        },
        {
            "parentName": "unixepoch",
            "funcName": "to_unix_timestamp",
            "displayName": "To Unix Timestamp",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the UNIX timestamp of the given date time values.",
            "examples": {
                "columns": [
                    "Data column: 06/12/2018 00 03 00"
                ],
                "functions": [
                    {
                        "function": "to_unix_timestamp(Data column)",
                        "result": "1544034780"
                    }
                ]
            }
        },
        {
            "parentName": "ismissing",
            "funcName": "is_missing",
            "displayName": "Is Missing",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter can be a column of any datatype."
                }
            ],
            "funcType": "logical",
            "description": "Returns true for missing values, false otherwise.",
            "examples": {
                "columns": [
                    "Sales : 11, 12,' ', 67"
                ],
                "functions": [
                    {
                        "function": "is_missing(Sales)",
                        "result": "[false, false, true, false]"
                    }
                ]
            }
        },
        {
            "parentName": "isvalid",
            "funcName": "is_valid",
            "displayName": "Is Valid",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param1",
                    "argDesc": "Parameter must be a column conforming to any one data type."
                },
                {
                    "argType": "string",
                    "argName": "param2",
                    "argDesc": "Data type to verify if param1 is valid. It can be one of these values: Text, Date, Number, Positive number, Percentage, Datetime, Time, Timestamp, Duration, Decimal, Currency, Length, Temperature, Boolean, Email, URL, List, Map, and Custom Data Types"
                }
            ],
            "funcType": "logical",
            "description": "Returns true for valid values; false otherwise.",
            "examples": {
                "columns": [
                    "Column1: \"ABC\" , \"DEF\" ,\"GHI\""
                ],
                "functions": [
                    {
                        "function": "is_valid(`Column1`,'text')",
                        "result": "TRUE"
                    }
                ]
            }
        },
        {
            "parentName": "isinvalid",
            "funcName": "is_invalid",
            "displayName": "Is Invalid",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param1",
                    "argDesc": "Parameter must be a column conforming to any one data type."
                },
                {
                    "argType": "string",
                    "argName": "param2",
                    "argDesc": "Data type to verify if param1 is invalid. It can be one of these values: Text, Date, Number, Positive number, Percentage, Datetime, Time, Timestamp, Duration, Decimal, Currency, Length, Temperature, Boolean, Email, URL, List, Map, and Custom Data Types"
                }
            ],
            "funcType": "logical",
            "description": "Returns true for invalid values; false otherwise.",
            "examples": {
                "columns": [
                    "Column1: \"ABC\" , \"DEF\" ,\"GHI\""
                ],
                "functions": [
                    {
                        "function": "is_invalid(`Column1`, 'Number')",
                        "result": "TRUE"
                    }
                ]
            }
        },
        {
            "parentName": "size",
            "funcName": "size",
            "displayName": "Size",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "array",
                    "argName": "param",
                    "argDesc": "Parameter must be a column of type List, or a group of values as a list."
                }
            ],
            "funcType": "array",
            "description": "Returns the size of a list. Returns -1 if null.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "size(['b', 'd', 'c', 'a'])",
                        "result": "4"
                    }
                ]
            }
        },
        {
            "parentName": "array_concat",
            "funcName": "list_concat",
            "displayName": "List Concat",
            "args": 2,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "array",
                    "argName": "param1",
                    "argDesc": "Specifies the first of the two lists to concatenate."
                },
                {
                    "argType": "array",
                    "argName": "param2",
                    "argDesc": "Specifies the second of the two lists to concatenate."
                }
            ],
            "funcType": "array",
            "description": "Returns a list that contains all the elements in the first list followed by all the elements in the second. The two input lists must contain items in the same data structure format.",
            "examples": {
                "columns": [
                    "column1: [1,2,3,4,5]",
                    "column2: [\"A\",\"B,\"C\",\"D\",\"E\" ]"
                ],
                "functions": [
                    {
                        "function": "list_concat(column1, column2)",
                        "result": "[\"1\",\"2\",\"3\",\"4\",\"5\",\"A\",\"B\",\"C\",\"D\",\"E\"]"
                    }
                ]
            }
        },
        {
            "parentName": "array_unique",
            "funcName": "list_unique",
            "displayName": "List Unique",
            "args": 1,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "array",
                    "argName": "param",
                    "argDesc": "Parameter must be of type list or a List column."
                }
            ],
            "funcType": "array",
            "description": "Filters the list by removing duplicate entries from it. Returns the filtered list.",
            "examples": {
                "columns": [
                    "list: [30, 40, 50, 30, 70, 30, 90]"
                ],
                "functions": [
                    {
                        "function": "list_unique(list)",
                        "result": "[\"40\", \"50\", \"70\", \"90\"]"
                    }
                ]
            }
        },
        {
            "parentName": "array_intersect",
            "funcName": "list_intersect",
            "displayName": "List Intersect",
            "args": 2,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "array",
                    "argName": "param1",
                    "argDesc": "The list to compare from."
                },
                {
                    "argType": "array",
                    "argName": "param2",
                    "argDesc": "A list to compare against."
                }
            ],
            "funcType": "array",
            "description": "This function compares the values of two lists, and returns only the matching elements. The two lists must contain items in the same data structure format.",
            "examples": {
                "columns": [
                    "list1: [1,2,3,4,5]",
                    "list2: [\"A\", 1, \"B\" ,2, \"C\", 3, \"D\", 4, \"E\"]"
                ],
                "functions": [
                    {
                        "function": "list_intersect(list1, list2)",
                        "result": "[\"1\", \"2\", \"3\", \"4\"]"
                    }
                ]
            }
        },
        {
            "parentName": "array_zip",
            "funcName": "list_zip",
            "displayName": "List Zip",
            "args": 2,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "array",
                    "argName": "param1",
                    "argDesc": "Parameter must be of type list or a List column."
                },
                {
                    "argType": "array",
                    "argName": "param2",
                    "argDesc": "Parameter must be of type list or a List column."
                }
            ],
            "funcType": "array",
            "description": "Converts two unidimensional list columns into a multi dimensional list.",
            "examples": {
                "columns": [
                    "list1: [\"A\",\"B\",\"C\"]",
                    "list2: [\"D\",\"E\",\"F\"]"
                ],
                "functions": [
                    {
                        "function": "list_zip(list1 , list2)",
                        "result": "[[\"A\",\"D\"],[\"B\",\"E\"],[\"C\",\"F\"]]"
                    }
                ]
            }
        },
        {
            "parentName": "split",
            "funcName": "split",
            "displayName": "Split",
            "args": 2,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "str",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "regex",
                    "argDesc": "Parameter must be a Text mentioning the regular expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Splits the text around occurrences that match the regular expression.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "split('oneAtwoBthreeC', '[ABC]')",
                        "result": "[\"one\",\"two\",\"three\",\"\"]"
                    }
                ]
            }
        },
        {
            "parentName": "collect_set",
            "funcName": "collect_set",
            "displayName": "Collect Set",
            "args": 1,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a column conforming to any one data type."
                }
            ],
            "funcType": "aggregate",
            "description": "Collects the distinct values from a column as a list.",
            "examples": {
                "columns": [
                    "Column1: \"Australia\", \"United States\", \"Australia\", \"Canada\", \"Canada\""
                ],
                "functions": [
                    {
                        "function": "collect_set(Column1)",
                        "result": "[\"Australia\",\"United States\",\"Canada\"]"
                    }
                ]
            }
        },
        {
            "parentName": "contains",
            "funcName": "contains",
            "displayName": "Contains",
            "args": 3,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric value. Using '0' will make the search case-sensitive in finding the Text. Using any other number will render the search case-insensitive."
                }
            ],
            "funcType": "string",
            "description": "Returns true if the text string1 contains string2",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "contains(\"Pineapple\", \"Apple\", 0)",
                        "result": "True"
                    }
                ]
            }
        },
        {
            "parentName": "starts_with",
            "funcName": "starts_with",
            "displayName": "Starts With",
            "args": 3,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "Specifies Text values or a Text column."
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Specifies Text values or a Text column"
                },
                {
                    "argType": "number",
                    "argName": "number",
                    "argDesc": "Specifies if the comparison should be case-sensitive (input '1') or non case-sensitive (input '0')."
                }
            ],
            "funcType": "string",
            "description": "Compares two text columns and returns true if the text string1 starts with string2.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "starts_with('Sunday', 'Sun', '1')",
                        "result": "True"
                    },
                    {
                        "function": "starts_with('Sunday', 'Mon', '0')",
                        "result": "False"
                    }
                ]
            }
        },
        {
            "parentName": "ends_with",
            "funcName": "ends_with",
            "displayName": "Ends With",
            "args": 3,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Parameter must be a Text, a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric value. Using '0' will make the search case-sensitive in finding the sting. Using any other number will render the search case-insensitive."
                }
            ],
            "funcType": "string",
            "description": "Returns true if the text string1 ends with string2.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "ends_with(\"Newyork\",\"york\", 0)",
                        "result": "True"
                    }
                ]
            }
        },
        {
            "parentName": "extract_date_with_format",
            "funcName": "extract_date_with_format",
            "displayName": "Extract Date With Format",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "date",
                    "argName": "datetime",
                    "argDesc": "Parameter must be a Date column or a Datetime column."
                },
                {
                    "argType": "string",
                    "argName": "format",
                    "argDesc": "Specifies the format in which the date should be extracted by the function."
                }
            ],
            "funcType": "date",
            "description": "Returns the date component from date column in the given format.",
            "examples": {
                "columns": [
                    "Data column: 2009-05-17"
                ],
                "functions": [
                    {
                        "function": "extract_date_with_format(Data column, 'dd-MM-yyyy')",
                        "result": "17-05-2009"
                    }
                ]
            }
        },
        {
            "parentName": "extract_time_with_format",
            "funcName": "extract_time_with_format",
            "displayName": "Extract Time With Format",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Parameter is mandatory and it must be a Datetime type column."
                },
                {
                    "argType": "string",
                    "argName": "format",
                    "argDesc": "Parameter is mandatory and it must be a Text representing the time format to extract."
                }
            ],
            "funcType": "date",
            "description": "Returns the time component from Datetime column in the given format.",
            "examples": {
                "columns": [
                    "Data column: 2009-05-07 12 03 34 433"
                ],
                "functions": [
                    {
                        "function": "extract_time_with_format(Data column, 'hh:mm:ss:SSS')",
                        "result": "12:03:34:433"
                    }
                ]
            }
        },
        {
            "parentName": "keyword_extraction",
            "funcName": "keyword_extraction",
            "displayName": "Keyword Extraction",
            "args": 4,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "number",
                    "argName": "maxKeywordLength",
                    "argDesc": "Maximum number of words in a single keyword set. For example, for the sentence, 'Operating Systems' key length can be at most two."
                },
                {
                    "argType": "number",
                    "argName": "topElements",
                    "argDesc": "Pick top N elements from results."
                },
                {
                    "argType": "string",
                    "argName": "model",
                    "argDesc": "Three models are supported. They are namely, ONLY_VALID_KEYWORDS, RANKED_KEYWORDS, RANKED_KEYWORDS_WITH_INDEX."
                }
            ],
            "funcType": "string",
            "description": "Returns the keywords present in the column.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "keyword_extraction(`A room without books is like a body without a soul.` , '1' , '4' , 'ONLY_VALID_KEYWORDS')",
                        "result": "('room','books','body','soul')"
                    }
                ]
            }
        },
        {
            "parentName": "lang_predict",
            "funcName": "lang_predict",
            "displayName": "Language Prediction",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameter must be a Text or a Text column, or an expression that returns a Text."
                },
                {
                    "argType": "string",
                    "argName": "langType",
                    "argDesc": "Parameter must be either be 'code', or 'name'. Code will display the language code as a result, whereas name will display the name of the language."
                }
            ],
            "funcType": "string",
            "description": "Detect language from the given text. Supports 71 languages.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "lang_predict('மதிப்புரைகளைப் படிக்கவும்' , 'name')",
                        "result": "Tamil"
                    },
                    {
                        "function": "lang_predict('மதிப்புரைகளைப் படிக்கவும' , 'code')",
                        "result": "ta"
                    }
                ]
            }
        },
        {
            "parentName": "min",
            "funcName": "min_if",
            "displayName": "Min If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a Number column"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the min value on satisfying the given condition",
            "examples": {
                "columns": [
                    "ticket_count : 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "min_if(ticket_count, ticket_count!=30)",
                        "result": "40"
                    }
                ]
            }
        },
        {
            "parentName": "max",
            "funcName": "max_if",
            "displayName": "Max If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a Number column"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the max value on satisfying the given condition",
            "examples": {
                "columns": [
                    "ticket_count : 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "max_if(ticket_count, ticket_count!=90)",
                        "result": "80"
                    }
                ]
            }
        },
        {
            "parentName": "avg",
            "funcName": "avg_if",
            "displayName": "Avg If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a Number column"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the average value on satisfying the given condition",
            "examples": {
                "columns": [
                    "ticket_count : 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "avg_if(ticket_count, ticket_count!=30)",
                        "result": "65"
                    }
                ]
            }
        },
        {
            "parentName": "sum",
            "funcName": "sum_if",
            "displayName": "Sum If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter is mandatory and must be a numeric column or value"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the sum of the values on satisfying the given condition",
            "examples": {
                "columns": [
                    "marks: [90, 85, 95, 65]",
                    "grade: [A, B, A, D]"
                ],
                "functions": [
                    {
                        "function": "sum_if(marks, `grade`=='A')",
                        "result": "[185, 185, 185, 185]"
                    }
                ]
            }
        },
        {
            "parentName": "mode",
            "funcName": "mode_if",
            "displayName": "Mode If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a Number column"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the mode value on satisfying the given condition",
            "examples": {
                "columns": [
                    "ticket_count : 30, 40, 30, 40, 30, 80, 90"
                ],
                "functions": [
                    {
                        "function": "mode_if(ticket_count, ticket_count!=30)",
                        "result": "40"
                    }
                ]
            }
        },
        {
            "parentName": "stddev",
            "funcName": "stddev_if",
            "displayName": "Standard Deviation If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "number",
                    "argDesc": "Parameter must be a numeric column's value or an expression that returns a number."
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a boolean value based on which the function is calculated."
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the population standard deviation of the given column after applying the specified condition.",
            "examples": {
                "columns": [
                    "Country: India, USA, Germany",
                    "Movie: Avatar, Inception, Avatar",
                    "Rating: 9.432, 1.0, 2.0"
                ],
                "functions": [
                    {
                        "function": "stddev_if(Rating, `Movie`=='Avatar')",
                        "result": "5.2552175978"
                    }
                ]
            }
        },
        {
            "parentName": "variance",
            "funcName": "variance_if",
            "displayName": "Variance If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter is mandatory and must be a numeric column or an expression that returns a list of numbers"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the variance of the values on satisfying the given condition",
            "examples": {
                "columns": [
                    "sales_amount: 9.432, 1, 2",
                    "country: India, USA, India"
                ],
                "functions": [
                    {
                        "function": "variance_if(sales_amount, 'country'=='India');",
                        "result": "27.6173124, 27.617312, 27.617312"
                    }
                ]
            }
        },
        {
            "parentName": "count",
            "funcName": "count_if",
            "displayName": "Count If",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "col",
                    "argDesc": "Parameter must be a column"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the total number of values on satisfying the given condition",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "count_if(ticket_count, ticket_count!=30)",
                        "result": "6"
                    }
                ]
            }
        },
        {
            "parentName": "countdistinct",
            "funcName": "count_distinct",
            "displayName": "Count Distinct",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "col",
                    "argDesc": "Parameter must be a column"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the total number of distinct values in the column",
            "examples": {
                "columns": [
                    "ticket_count:30, 40, 30, 60, 70, 60, 90"
                ],
                "functions": [
                    {
                        "function": "count_distinct(ticket_count);",
                        "result": "5"
                    }
                ]
            }
        },
        {
            "parentName": "countdistinct",
            "funcName": "count_distinct_if",
            "displayName": "Count Distinct If",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "col",
                    "argDesc": "Parameter must be a column"
                },
                {
                    "argType": "boolean",
                    "argName": "condition",
                    "argDesc": "Condition must return a Boolean value based on which the function is calculated"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the total number of distinct values satisfying the given condition",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50, 60, 30, 80, 40"
                ],
                "functions": [
                    {
                        "function": "count_distinct_if(ticket_count, ticket_count!=30)",
                        "result": "4"
                    }
                ]
            }
        },
        {
            "parentName": "range",
            "funcName": "range",
            "displayName": "Range",
            "args": 3,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "startNum",
                    "argDesc": "Parameter must be a Number column or a number. Decimal values are not supported."
                },
                {
                    "argType": "number",
                    "argName": "stopNum",
                    "argDesc": "Parameter must be a Number column or a number. Decimal values are not supported."
                },
                {
                    "argType": "number",
                    "argName": "stepNum",
                    "argDesc": "Specifies the step value for the range. Decimal values are not supported."
                }
            ],
            "funcType": "array",
            "description": "Computes an array of integers beginning from 'startNum' to 'stopNum' having an interval of 'stepNum' between consecutive integers in the range. If the function generates more than 1000 values for a cell, the output is a null value and the 'stopNum' is excluded from the output. 'StepNum' must always be a positive integer. If 'startNum' is greater than 'stopNum', steps are automatically converted to negative values and the output will be a decrement range.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "range('2','14','2')",
                        "result": "[2, 4, 6, 8, 10, 12]"
                    },
                    {
                        "function": "range('14','2','2')",
                        "result": "[14, 12, 10, 8, 6, 4]"
                    }
                ]
            }
        },
        {
            "parentName": "locate",
            "funcName": "locate",
            "displayName": "Locate",
            "args": 3,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "Parameter must be a Text, a Text column or an expression that returns a Text"
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Parameter must be a Text, a Text column or an expression that returns a Text"
                },
                {
                    "argType": "number",
                    "isOptional": true,
                    "argName": "position",
                    "argDesc": "Specifies the position after which 'string2' should be located.",
                    "defaultValue": null
                }
            ],
            "funcType": "string",
            "description": "Returns the position of the first occurrence of the text 'string1' in 'string2' after the 'position' given",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "locate('bar', 'foobarbar')",
                        "result": "4"
                    },
                    {
                        "function": "locate('bar', 'foobarbar' , 5)",
                        "result": "5"
                    }
                ]
            }
        },
        {
            "parentName": "lpad",
            "funcName": "lpad",
            "displayName": "Left Padding",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameter must be a Text, a Text column or an expression that returns a Text"
                },
                {
                    "argType": "number",
                    "argName": "length",
                    "argDesc": "Specifies the total length of the output Text"
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Specifies the Text that must be added to, or replaced in the 'Text1' value"
                }
            ],
            "funcType": "string",
            "description": "Returns the 'string' text left-padded with a 'padString' for the 'length' specified. Padding will be applied only when 'length' value is more than the length of the text, if not the output text is shortened to the 'length' parameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "lpad('abcd', 3, 'A')",
                        "result": "Aab"
                    },
                    {
                        "function": "lpad('abcd', 7, 'A')",
                        "result": "AAAabcd"
                    }
                ]
            }
        },
        {
            "parentName": "rpad",
            "funcName": "rpad",
            "displayName": "Right Padding",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameter must be a Text column or an expression that returns a Text"
                },
                {
                    "argType": "number",
                    "argName": "length",
                    "argDesc": "Specifies the total length of the output Text"
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Specifies the Text that must be added to, or replaced in the 'Text1' value"
                }
            ],
            "funcType": "string",
            "description": "Returns the 'string' text right-padded with a 'padString' for the 'length' specified. Padding will be applied only when 'length' value is more than the length of the text, if not the output text is shortened to the 'length' parameter.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "rpad('abcd', 5, 'A')",
                        "result": "abcdA"
                    },
                    {
                        "function": "rpad('abcd', 7, 'A')",
                        "result": "abcdAAA"
                    }
                ]
            }
        },
        {
            "parentName": "array",
            "funcName": "nest_as_list",
            "displayName": "Nest as List",
            "args": -1,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "All parameters must be a Text, or a Text column, or an expression that returns a Text"
                },
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "All parameters must be a Text, or a Text column, or an expression that returns a Text",
                    "is_vararg": true
                }
            ],
            "funcType": "array",
            "description": "Converts the given parameters to a list",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "nest_as_list('Arjun', 'Zip code: 308-242-0670', 'Status: New resident')",
                        "result": "[\"Arjun\", \"Zip code: 99501\", \"Status: New resident\"]"
                    }
                ]
            }
        },
        {
            "parentName": "nest_as_object",
            "funcName": "nest_as_map",
            "displayName": "Nest as Map",
            "args": -1,
            "resultantType": "object",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "Accepts multiple parameters. All parameters must be a column."
                },
                {
                    "argType": "string",
                    "argName": "params",
                    "argDesc": "Accepts multiple parameters. All parameters must be a column.",
                    "is_vararg": true
                }
            ],
            "funcType": "object",
            "description": "Converts the given parameters to a map. The first value will be the key, and the second will be the value in making each key-value pair.",
            "examples": {
                "columns": [
                    "details : ['Name', 'Arjun', 'Zip code', '308-242-0670']"
                ],
                "functions": [
                    {
                        "function": "nest_as_map(details)",
                        "result": "{'Name' : 'Arjun', 'Zip code' : '308-242-0670'}"
                    }
                ]
            }
        },
        {
            "parentName": "elt",
            "funcName": "elt",
            "displayName": "ELT",
            "args": -1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Parameter must be a numerical value, a numerical column or an expression that returns a number"
                },
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Accepts multiple parameters. All parameters must be a Text column or an expression that returns a Text.",
                    "is_vararg": true
                }
            ],
            "funcType": "string",
            "description": "Returns the text value available at the index number specified in the first argument",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "elt('5', 'Zoho', 'is the', 'operating system', 'for your', 'business')",
                        "result": "business"
                    }
                ]
            }
        },
        {
            "parentName": "field",
            "funcName": "field",
            "displayName": "Field",
            "args": -1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "First parameter must be a Text, a Text column or an expression that returns a Text"
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Accepts multiple parameters. Each parameter from the second must be a Text, a Text column or an expression that returns a Text.",
                    "is_vararg": true
                }
            ],
            "funcType": "string",
            "description": "Searches the value in the first argument with all the rest of the arguments and returns the position of the argument where the first match is found",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "field('as','has','as','have')",
                        "result": "2"
                    }
                ]
            }
        },
        {
            "parentName": "insert",
            "funcName": "insert",
            "displayName": "Insert",
            "args": 4,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "Parameter must be a Text, a Text column or an expression that returns a Text"
                },
                {
                    "argType": "number",
                    "argName": "position",
                    "argDesc": "The position where the 'Text2' parameter must be inserted"
                },
                {
                    "argType": "number",
                    "argName": "length",
                    "argDesc": "The length of the Text"
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Specifies the Text that must be added to, or replaced in the 'Text1' value"
                }
            ],
            "funcType": "string",
            "description": "Inserts the text string2 in string1 at the index 'position' for the specified 'length'",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "insert('abcddb', 3, 2, 'efgh')",
                        "result": "abefghdb"
                    }
                ]
            }
        },
        {
            "parentName": "repeat",
            "funcName": "repeat",
            "displayName": "Repeat",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameter must be a Text column or a Text, or an expression that returns a Text"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Parameter must be a numerical value, a numerical column or an expression that returns a number. Value must less than or equal to 9999."
                }
            ],
            "funcType": "string",
            "description": "Repeats the given 'string' text for the specified number of times and returns the constructed text.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "repeat('Abcd', 3)",
                        "result": "AbcdAbcdAbcd"
                    }
                ]
            }
        },
        {
            "parentName": "percentile",
            "funcName": "percentile",
            "displayName": "Percentile",
            "args": 3,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a Number column"
                },
                {
                    "argType": "string",
                    "argName": "percentage",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a value between 0.0 to 1.0"
                },
                {
                    "argType": "number",
                    "argName": "frequency",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a positive number",
                    "isOptional": true,
                    "defaultValue": null
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the exact percentile value of 'num' at the given 'percentage'",
            "examples": {
                "columns": [
                    "ticket_count: 30, 40, 50, 60, 70, 80, 90"
                ],
                "functions": [
                    {
                        "function": "percentile(ticket_count, 0.3, 0)",
                        "result": "3.0"
                    }
                ]
            }
        },
        {
            "parentName": "acos",
            "funcName": "acos",
            "displayName": "Acos",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric value, a numeric column or an expression that returns a number in the range of [-1...1]"
                }
            ],
            "funcType": "math",
            "description": "Returns the inverse cosine or arc cosine of the input expressed in radians",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "acos(0.34);",
                        "result": "1.22387943"
                    }
                ]
            }
        },
        {
            "parentName": "asin",
            "funcName": "asin",
            "displayName": "Asin",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a number, or a numeric column, or an expression that returns a number in the range of [-1...1]"
                }
            ],
            "funcType": "math",
            "description": "Returns the arc sine or inverse sine of the input expressed in radians",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "asin(0.34);",
                        "result": "19.876874"
                    }
                ]
            }
        },
        {
            "parentName": "atan",
            "funcName": "atan",
            "displayName": "Atan",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a number, or a numeric column, or an expression that returns a number in the range of [-1...1]"
                }
            ],
            "funcType": "math",
            "description": "Returns the arc tangent or inverse tangent of the input expressed in radians",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "atan(0.34);",
                        "result": "18.77803322"
                    }
                ]
            }
        },
        {
            "parentName": "atan2",
            "funcName": "atan2",
            "displayName": "Atan2",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num1",
                    "argDesc": "The parameter must be a number, or numeric columns, or expressions that returns a number"
                },
                {
                    "argType": "decimal",
                    "argName": "num2",
                    "argDesc": "The parameter must be a number, or numeric columns, or expressions that returns a number"
                }
            ],
            "funcType": "math",
            "description": "Returns arc tangent or inverse tangent for two numeric values",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "atan2(5, 5);",
                        "result": "0.7853981633974483"
                    }
                ]
            }
        },
        {
            "parentName": "cos",
            "funcName": "cos",
            "displayName": "Cos",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric value, a numeric column or an expression that returns a number"
                }
            ],
            "funcType": "math",
            "description": "Returns the trigonometric cosine of the given angle in radians.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "cos(0);",
                        "result": "1.0"
                    }
                ]
            }
        },
        {
            "parentName": "sin",
            "funcName": "sin",
            "displayName": "Sin",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a number, or a numeric column, or an expression that returns a number"
                }
            ],
            "funcType": "math",
            "description": "Returns the trigonometric sine of the given angle in radians.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "sin(0)",
                        "result": "0.0"
                    }
                ]
            }
        },
        {
            "parentName": "tan",
            "funcName": "tan",
            "displayName": "Tan",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "angle",
                    "argDesc": "Parameter must be a number, or a numeric column, or an expression that returns a number"
                }
            ],
            "funcType": "math",
            "description": "Returns the trigonometric tangent of a given angle in radians.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "tan(9.432)",
                        "result": "0.0072221648"
                    }
                ]
            }
        },
        {
            "parentName": "cot",
            "funcName": "cot",
            "displayName": "Cot",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "num",
                    "argDesc": "Parameter must be a numeric value, a numeric column, or an expression that returns a number"
                }
            ],
            "funcType": "math",
            "description": "Returns the trigonometric cotangent of a given angle in radians.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "cot(0.25)",
                        "result": "3.916317"
                    }
                ]
            }
        },
        {
            "parentName": "sign",
            "funcName": "sign",
            "displayName": "Sign",
            "args": 1,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "number",
                    "argDesc": "Specifies the number column for which the function is to be applied"
                }
            ],
            "funcType": "math",
            "description": "Detects whether the value in the numeric column is positive, negative or zero",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "sign('-24')",
                        "result": "-1"
                    }
                ]
            }
        },
        {
            "parentName": "islastnday",
            "funcName": "is_last_nday",
            "displayName": "Is Last NDay",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of days"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value is within the previous N days from today",
            "examples": {
                "columns": [
                    "Data column: 06/15/2020"
                ],
                "functions": [
                    {
                        "function": "is_last_nday(Data column, 10)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "islastnmonth",
            "funcName": "is_last_nmonth",
            "displayName": "Is Last NMonth",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of months"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value is within the previous N months from the current month",
            "examples": {
                "columns": [
                    "Data column: 05/15/2020"
                ],
                "functions": [
                    {
                        "function": "is_last_nmonth(Data column, 3)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "islastnquarter",
            "funcName": "is_last_nquarter",
            "displayName": "Is Last NQuarter",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of quarters"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value is within the previous N quarters from the current quarter",
            "examples": {
                "columns": [
                    "Data column: 05/15/2020"
                ],
                "functions": [
                    {
                        "function": "is_last_nquarter(Data column, 3)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "islastnyear",
            "funcName": "is_last_nyear",
            "displayName": "Is Last NYear",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of years"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value is within the previous N years from the current year",
            "examples": {
                "columns": [
                    "Data column: 06/15/2019"
                ],
                "functions": [
                    {
                        "function": "is_last_nyear(Data column, 10)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "iscurrentmonth",
            "funcName": "is_current_month",
            "displayName": "Is Current Month",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given Date or the Datetime value falls under the current month.",
            "examples": {
                "columns": [
                    "Data column: 06/15/2020"
                ],
                "functions": [
                    {
                        "function": "is_current_month(Data column)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "iscurrentquarter",
            "funcName": "is_current_quarter",
            "displayName": "Is Current Quarter",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given Date or the Datetime value falls under the current quarter.",
            "examples": {
                "columns": [
                    "Data column: 07/15/2000"
                ],
                "functions": [
                    {
                        "function": "is_current_quarter(Data column)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "iscurrentweek",
            "funcName": "is_current_week",
            "displayName": "Is Current Week",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "number",
                    "argName": "startDay",
                    "argDesc": "Specifies the starting day of the week. The value range from 0 to 6 in this order. [0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday]"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given Date or the Datetime value falls under the current week. The starting day of the week is Sunday by default. This value can be changed using the 'startDay' parameter.",
            "examples": {
                "columns": [
                    "Data column: 06/15/2020"
                ],
                "functions": [
                    {
                        "function": "is_current_week(Data column, 1)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "iscurrentyear",
            "funcName": "is_current_year",
            "displayName": "Is Current Year",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given Date or Datetime value falls under the current year.",
            "examples": {
                "columns": [
                    "Data column: 07/15/2000"
                ],
                "functions": [
                    {
                        "function": "is_current_year(Data column)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "isnextnday",
            "funcName": "is_next_nday",
            "displayName": "Is Next NDay",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of days"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value falls in the next N days from today",
            "examples": {
                "columns": [
                    "Data column: 06/18/2020"
                ],
                "functions": [
                    {
                        "function": "is_next_nday(Data column, 10)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "isnextnmonth",
            "funcName": "is_next_nmonth",
            "displayName": "Is Next NMonth",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of months"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value falls under the next N months from this month",
            "examples": {
                "columns": [
                    "Data column: 06/18/2020"
                ],
                "functions": [
                    {
                        "function": "is_next_nmonth(Data column, 3)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "isnextnquarter",
            "funcName": "is_next_nquarter",
            "displayName": "Is Next NQuarter",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of quarters"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value falls under the next N quarters from this quarter",
            "examples": {
                "columns": [
                    "Data column: 06/18/2020"
                ],
                "functions": [
                    {
                        "function": "is_next_nquarter(Data column, 1)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "isnextnyear",
            "funcName": "is_next_nyear",
            "displayName": "Is Next NYear",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "num",
                    "argDesc": "Specifies the number of years"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value falls under the next N years from this year",
            "examples": {
                "columns": [
                    "Data column: 06/15/2020"
                ],
                "functions": [
                    {
                        "function": "is_next_nyear(Data column, 2)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "startdate",
            "funcName": "start_date",
            "displayName": "Start Date",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "string",
                    "argName": "unit",
                    "argDesc": "Specifies the unit of the date column. The date units can be 'week', 'week_sunday', 'week_monday', 'month', 'quarter' and 'year'."
                }
            ],
            "funcType": "date",
            "description": "Returns start date for the given date value using the given date units",
            "examples": {
                "columns": [
                    "Data column: 28/10/2020"
                ],
                "functions": [
                    {
                        "function": "start_date(Data column, 'month')",
                        "result": "01/10/2020"
                    }
                ]
            }
        },
        {
            "parentName": "enddate",
            "funcName": "end_date",
            "displayName": "End Date",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column over which the function is applied"
                },
                {
                    "argType": "string",
                    "argName": "units",
                    "argDesc": "Specifies the unit of the date column. The date units can be 'week', 'week_sunday', 'week_monday', 'month', 'quarter' and 'year'."
                }
            ],
            "funcType": "date",
            "description": "Returns the end date for the given date value using the given date units.",
            "examples": {
                "columns": [
                    "Data column: 2018-08-27"
                ],
                "functions": [
                    {
                        "function": "end_date(Data column, 'month')",
                        "result": "2018-08-31"
                    }
                ]
            }
        },
        {
            "parentName": "ascii",
            "funcName": "ascii",
            "displayName": "ASCII",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameters must be a Text or a Text column, or an expression that returns a Text"
                }
            ],
            "funcType": "string",
            "description": "Returns the ASCII value of the specified character",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "ascii('A')",
                        "result": "65"
                    }
                ]
            }
        },
        {
            "parentName": "bit_length",
            "funcName": "bit_length",
            "displayName": "Bit Length",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameters must be a Text, or a Text column, or an expression that returns a Text"
                }
            ],
            "funcType": "string",
            "description": "Returns the value of the length of the text parameter as bit length",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "bit_length(\"AA\")",
                        "result": "16"
                    }
                ]
            }
        },
        {
            "parentName": "instr",
            "funcName": "index_of",
            "displayName": "Index Of",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "The parameter must be a Text, a Text column, or an expression that returns a Text"
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "The parameter must be a Text, a Text column, or an expression that returns a Text"
                }
            ],
            "funcType": "string",
            "description": "Returns the index of the first occurrence of the text 'string2' in 'string1'",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "index_of('abcddb','db')",
                        "result": "5"
                    }
                ]
            }
        },
        {
            "parentName": "space",
            "funcName": "space",
            "displayName": "Space",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "number",
                    "argDesc": "Specifies number of spaces required. Parameter can be a number column specifying the number of spaces."
                }
            ],
            "funcType": "string",
            "description": "Returns a text consisting of n spaces.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "space('2')",
                        "result": "'  '"
                    }
                ]
            }
        },
        {
            "parentName": "unhex",
            "funcName": "unhex",
            "displayName": "Un Hexadecimal",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "HexVal",
                    "argDesc": "Parameter must be a hexadecimal Text value"
                }
            ],
            "funcType": "string",
            "description": "Returns the corresponding character for each pair of hexadecimal digits",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "unhex('476F64');",
                        "result": "God"
                    }
                ]
            }
        },
        {
            "parentName": "tomorrow",
            "funcName": "tomorrow",
            "displayName": "Tomorrow",
            "args": 0,
            "resultantType": "date",
            "argTypes": [],
            "funcType": "date",
            "description": "Returns the date after the current date",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "tomorrow();",
                        "result": "02/06/2020"
                    }
                ]
            }
        },
        {
            "parentName": "yesterday",
            "funcName": "yesterday",
            "displayName": "Yesterday",
            "args": 0,
            "resultantType": "date",
            "argTypes": [],
            "funcType": "date",
            "description": "Returns the date of the previous day from the current date",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "yesterday();",
                        "result": "28/05/2020"
                    }
                ]
            }
        },
        {
            "parentName": "year_week",
            "funcName": "year_week",
            "displayName": "Year and Week",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Parameter must be a Date column or a Datetime column"
                }
            ],
            "funcType": "date",
            "description": "Returns the year and week of the given date",
            "examples": {
                "columns": [
                    "Data column: 06 Dec 2018 , 17 Nov 2018"
                ],
                "functions": [
                    {
                        "function": "year_week(Data column);",
                        "result": "201848, 201846"
                    }
                ]
            }
        },
        {
            "parentName": "strcmp",
            "funcName": "string_compare",
            "displayName": "String Compare",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string1",
                    "argDesc": "Specifies Text values or a Text column"
                },
                {
                    "argType": "string",
                    "argName": "string2",
                    "argDesc": "Specifies Text values or a Text column"
                }
            ],
            "funcType": "string",
            "description": "Compares two text columns and returns 0 if the columns are of equal size, 1 if column 1 is bigger than column 2 and returns -1 if column 2 is bigger than column 1.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "string_compare('Sunday', 'Monday')",
                        "result": "0"
                    }
                ]
            }
        },
        {
            "parentName": "corr",
            "funcName": "correl",
            "displayName": "correlation",
            "args": 2,
            "resultantType": "decimal",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "numList1",
                    "argDesc": "parameter must be a number column"
                },
                {
                    "argType": "decimal",
                    "argName": "numList2",
                    "argDesc": "parameter must be a number column"
                }
            ],
            "funcType": "aggregate",
            "description": "Returns the Pearson Coefficient of correlation between two numerical columns",
            "examples": {
                "columns": [
                    "Age: [20, 21, 24, 45, 46, 54, 60, 61, 63]",
                    "Weight: [123, 145, 160, 155, 200, 150, 134, 133, 120]"
                ],
                "functions": [
                    {
                        "function": "correl('Age', 'Weight');",
                        "result": "-0.1316"
                    }
                ]
            }
        },
        {
            "parentName": "first_date_current_week",
            "funcName": "first_date_current_week",
            "displayName": "First Date of the Current Week",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "number",
                    "argName": "startDay",
                    "argDesc": "Specifies the starting day of the week. The value range from 0 to 6 in this order. [0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday]"
                }
            ],
            "funcType": "date",
            "description": "Returns the day the current week begins with",
            "examples": {
                "columns": [
                    "Data column: 11 Oct 2013"
                ],
                "functions": [
                    {
                        "function": "first_date_current_week(`Data column`, 4)",
                        "result": "09 Oct 2013"
                    }
                ]
            }
        },
        {
            "parentName": "ispreviousweek",
            "funcName": "is_previous_week",
            "displayName": "Is Previous Week",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "startDay",
                    "argDesc": "Specifies the starting day of the week. The value range from 0 to 6 in this order. [0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday]"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value falls in the previous week based on the start day of the week",
            "examples": {
                "columns": [
                    "Data column: 10 Nov 2100"
                ],
                "functions": [
                    {
                        "function": "is_previous_week(`Data column`, 0)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "isnextweek",
            "funcName": "is_next_week",
            "displayName": "Is Next Week",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column"
                },
                {
                    "argType": "number",
                    "argName": "startDay",
                    "argDesc": "Specifies the starting day of the week. The value range from 0 to 6 in this order. [0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday]"
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given date value falls in the next week based on the start day of the week",
            "examples": {
                "columns": [
                    "Data column: 20 Nov 1900"
                ],
                "functions": [
                    {
                        "function": "is_next_week(`Data column`, 1)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "time",
            "funcName": "current_time",
            "displayName": "Current Time",
            "args": 0,
            "resultantType": "string",
            "argTypes": [],
            "funcType": "date",
            "description": "Returns the current time. Function accepts no parameters.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "current_time()",
                        "result": "19:18:55"
                    }
                ]
            }
        },
        {
            "parentName": "unify_date_format",
            "funcName": "parse_date",
            "displayName": "Parse Date",
            "args": -1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "date",
                    "argDesc": "Specifies the input column with dates in different formats. The column can be of any datatype."
                },
                {
                    "argType": "string",
                    "argName": "outputFormat",
                    "argDesc": "Specifies the output date format that the given date should be parsed to."
                },
                {
                    "argType": "string",
                    "argName": "inputFormats",
                    "argDesc": "Accepts multiple parameters where each specify the existing date formats present in the input column.",
                    "is_vararg": true
                }
            ],
            "funcType": "date",
            "description": "Returns date in the required format if the date value to be parsed falls under any of the given input formats",
            "examples": {
                "columns": [
                    "dateCol: Mon 23 Mar 2020, 17/02/2020, 03/21/2020, 04/24/2020 16_25"
                ],
                "functions": [
                    {
                        "function": "parse_date(dateCol, 'EEE dd MMM,yyyy', 'dd/MM/yyyy', 'MM/dd/yyyy', 'MM/dd/yyyy', MM/dd/yyyy HH_mm)",
                        "result": "Mon 23 Mar,2020,  Mon 17 Feb,2020, Sat 21 Mar,2020"
                    }
                ]
            }
        },
        {
            "parentName": "converttimezone",
            "funcName": "convert_timezone",
            "displayName": "Convert Timezone",
            "args": 3,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies the Datetime column."
                },
                {
                    "argType": "string",
                    "argName": "current_tz",
                    "argDesc": "The current time zone value should be in 'hh:mm' format"
                },
                {
                    "argType": "string",
                    "argName": "convert_tz",
                    "argDesc": "The difference in time between the current time zone and the alternate zone"
                }
            ],
            "funcType": "date",
            "description": "Returns the date and time value in converted timezone",
            "examples": {
                "columns": [
                    "Data column: 2004-01-01 12 00 00"
                ],
                "functions": [
                    {
                        "function": "convert_timezone(Data column,'+00:00','+10:00')",
                        "result": "2004-01-01 22:00:00"
                    }
                ]
            }
        },
        {
            "parentName": "sectotime",
            "funcName": "sec_to_time",
            "displayName": "Seconds to Time",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "seconds",
                    "argDesc": "Specifies the date time column or the exact number of seconds to be converted. The parameter can also be unix timestamp in milliseconds."
                }
            ],
            "funcType": "date",
            "description": "Converts the given seconds into time and returns it in the format HH:mm:ss. If given number is negative, a minus sign will be added before the result.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "sec_to_time('86399')",
                        "result": "23:59:59"
                    }
                ]
            }
        },
        {
            "parentName": "remove_symbols",
            "funcName": "remove_symbols",
            "displayName": "Remove Symbols",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "string",
                    "argDesc": "Parameter must be a Text column or a Text, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Removes all characters from a text that are not letters, numbers, accented Latin characters, non-Latin characters, or whitespace.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "remove_symbols('Abcd$%```')",
                        "result": "Abcd"
                    }
                ]
            }
        },
        {
            "parentName": "substring_between",
            "funcName": "substring_between",
            "displayName": "Substring in-between",
            "args": 4,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "fulltext",
                    "argDesc": "All parameters must be of Text or a Text column, or an expression that returns a Text"
                },
                {
                    "argType": "string",
                    "argName": "start_text",
                    "argDesc": "Specifies the Text value from which the sub text should be obtained"
                },
                {
                    "argType": "string",
                    "argName": "end_text",
                    "argDesc": "Specifies the Text value to which the sub text should be obtained"
                },
                {
                    "argType": "number",
                    "isOptional": true,
                    "defaultValue": "1",
                    "argName": "pos",
                    "argDesc": "It is an optional positive numeric value which specifies the position of the matching delimiter from which the sub text should be obtained"
                }
            ],
            "funcType": "string",
            "description": "Returns the characters between two given texts from the main text.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "substring_between('Sunday', 'n', 'y', 1)",
                        "result": "da"
                    }
                ]
            }
        },
        {
            "parentName": "substring_count",
            "funcName": "substring_count",
            "displayName": "Substring Count",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "fulltext",
                    "argDesc": "The parameter must be of Text or a Text column, or an expression that returns a Text"
                },
                {
                    "argType": "string",
                    "argName": "sub_text",
                    "argDesc": "Specifies the sub text whose count of occurrences is to be obtained"
                }
            ],
            "funcType": "string",
            "description": "Returns the count of occurrence of given sub text in the given text",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "substring_count('Sunday', 'day')",
                        "result": "1"
                    }
                ]
            }
        },
        {
            "parentName": "substring_index",
            "funcName": "substring_index",
            "displayName": "Substring Index",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "fulltext",
                    "argDesc": "All parameters must be of Text or a Text column, or an expression that returns a Text"
                },
                {
                    "argType": "string",
                    "argName": "delimiter",
                    "argDesc": "Specifies a delimiter based on which the sub text is to be obtained from the given value"
                },
                {
                    "argType": "number",
                    "argName": "count",
                    "argDesc": "It is a numeric value which specifies the number of delimiters before which the sub text should be obtained"
                }
            ],
            "funcType": "string",
            "description": "Returns the sub text before the delimiter, based on the count of occurrences of the delimiter in the given text column",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "substring_index('how.are.you',  '.' , 1)",
                        "result": "how"
                    }
                ]
            }
        },
        {
            "parentName": "microsecond",
            "funcName": "microsecond",
            "displayName": "Microsecond",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column"
                }
            ],
            "funcType": "date",
            "description": "Returns the microsecond value from the given Datetime value",
            "examples": {
                "columns": [
                    "Data column: 1990-08-07 10 35 23 3427"
                ],
                "functions": [
                    {
                        "function": "microsecond(Data column)",
                        "result": "342700"
                    }
                ]
            }
        },
        {
            "parentName": "makedate",
            "funcName": "make_date",
            "displayName": "Make Date",
            "args": 2,
            "resultantType": "date",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "year",
                    "argDesc": "Specifies the year which must be a number, a numeric column or an expression that returns a number"
                },
                {
                    "argType": "number",
                    "argName": "numOfDays",
                    "argDesc": "Specifies the number of days which must be a number, a numeric column or an expression that returns a number"
                }
            ],
            "funcType": "date",
            "description": "Returns the date value by adding the number of days to the given year",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "make_date('2020', '30')",
                        "result": "01/30/2020"
                    }
                ]
            }
        },
        {
            "parentName": "add_time",
            "funcName": "add_time",
            "displayName": "Add Time",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column."
                },
                {
                    "argType": "string",
                    "argName": "time",
                    "argDesc": "Specifies the time to increase the Datetime."
                }
            ],
            "funcType": "date",
            "description": "Adds the specified time to the given Datetime column.",
            "examples": {
                "columns": [
                    "Data column: 12/08/2018 07 58 59"
                ],
                "functions": [
                    {
                        "function": "add_time(Data column, '01:00:00')",
                        "result": "12/08/2018 08:58:59"
                    }
                ]
            }
        },
        {
            "parentName": "sub_time",
            "funcName": "sub_time",
            "displayName": "Sub Time",
            "args": 2,
            "resultantType": "datetime",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "datetime",
                    "argDesc": "Specifies a Datetime column"
                },
                {
                    "argType": "string",
                    "argName": "time",
                    "argDesc": "Specifies the time to decrement from the Datetime value. Value can be in the format `HH:mm:ss`"
                }
            ],
            "funcType": "date",
            "description": "Returns the Datetime by subtracting the specified time from the given value with time value",
            "examples": {
                "columns": [
                    "Data column: 12/08/2018 07 58 59"
                ],
                "functions": [
                    {
                        "function": "sub_time(Data column, '01:00:00')",
                        "result": "12/08/2018 06:58:59"
                    }
                ]
            }
        },
        {
            "parentName": "period_add",
            "funcName": "period_add",
            "displayName": "Period Add",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "yearMonth",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a number"
                },
                {
                    "argType": "number",
                    "argName": "numOfMonths",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a number"
                }
            ],
            "funcType": "date",
            "description": "Adds the specified number of months to the first parameter and returns in the 'year-month' format",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "period_add(20208,6)",
                        "result": "20212"
                    }
                ]
            }
        },
        {
            "parentName": "period_diff",
            "funcName": "period_diff",
            "displayName": "Period Difference",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "yearMonth1",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a number"
                },
                {
                    "argType": "number",
                    "argName": "yearMonth2",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a number"
                }
            ],
            "funcType": "date",
            "description": "Returns the difference between two periods in months",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "period_diff('198608','198602')",
                        "result": "6"
                    }
                ]
            }
        },
        {
            "parentName": "to_currency",
            "funcName": "to_currency",
            "displayName": "To Currency",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col",
                    "argDesc": "Parameter must be a numeric column or an expression that returns a number"
                },
                {
                    "argType": "string",
                    "argName": "currency",
                    "argDesc": "Parameter must be a Text value denoting the currency format"
                }
            ],
            "funcType": "general",
            "description": "Converts a numeric column to the currency format and datatype (value conversion between currencies is not supported yet)",
            "examples": {
                "columns": [
                    "sales: 34.30, 343.50, 56.30"
                ],
                "functions": [
                    {
                        "function": "to_currency(sales, '$')",
                        "result": "$34.30, $343.50, $56.30"
                    }
                ]
            }
        },
        {
            "parentName": "to_length",
            "funcName": "to_length",
            "displayName": "To Length",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "Column",
                    "argDesc": "Parameter must be a numeric value from a column or an expression that returns a number"
                },
                {
                    "argType": "string",
                    "argName": "lengthUnit",
                    "argDesc": "Parameter must be a Text value denoting the length unit that the given value needs to be converted into"
                }
            ],
            "funcType": "general",
            "description": "Converts a numeric column to the length datatype",
            "examples": {
                "columns": [
                    "Column: 50, 20, 30"
                ],
                "functions": [
                    {
                        "function": "to_length(Column, 'km')",
                        "result": "50km, 20km, 30km"
                    }
                ]
            }
        },
        {
            "parentName": "to_temperature",
            "funcName": "to_temperature",
            "displayName": "To Temperature",
            "args": 2,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "decimal",
                    "argName": "col",
                    "argDesc": "Parameter must be a numeric value from a column or an expression that returns a number"
                },
                {
                    "argType": "string",
                    "argName": "tempUnit",
                    "argDesc": "Parameter must be a Text value denoting the temperature unit the given value is to be converted into"
                }
            ],
            "funcType": "general",
            "description": "Converts a numeric column to the temperature datatype",
            "examples": {
                "columns": [
                    "col: 234.3, 343.5, 56.3"
                ],
                "functions": [
                    {
                        "function": "to_temperature(col, 'K')",
                        "result": "234.3K, 343.5K, 56.3K"
                    }
                ]
            }
        },
        {
            "parentName": "financialyear",
            "funcName": "financial_year",
            "displayName": "Financial Year",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date",
                    "argDesc": "Specifies a Date column or a Datetime column."
                },
                {
                    "argType": "number",
                    "argName": "month",
                    "argDesc": "Specifies the fiscal year starting month."
                }
            ],
            "funcType": "date",
            "description": "Returns the financial year from the date specifying the fiscal start month.",
            "examples": {
                "columns": [
                    "Data column: 09/25/2017"
                ],
                "functions": [
                    {
                        "function": "financial_year(Data column, '7')",
                        "result": "2018"
                    }
                ]
            }
        },
        {
            "parentName": "quotient",
            "funcName": "quotient",
            "displayName": "Quotient",
            "args": 2,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "num1",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a number"
                },
                {
                    "argType": "number",
                    "argName": "num2",
                    "argDesc": "Parameter must be a Number column or a number, or an expression that returns a number"
                }
            ],
            "funcType": "math",
            "description": "Returns the quotient of the given values in integer.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "quotient('12', '4')",
                        "result": "3"
                    }
                ]
            }
        },
        {
            "parentName": "arrays_to_map",
            "funcName": "lists_to_map",
            "displayName": "Lists to Map",
            "args": 2,
            "resultantType": "object",
            "argTypes": [
                {
                    "argType": "array",
                    "argName": "param1",
                    "argDesc": "Parameter must be of type List or a List column."
                },
                {
                    "argType": "array",
                    "argName": "param2",
                    "argDesc": "Parameter must be of type List or a List column."
                }
            ],
            "funcType": "array",
            "description": "Returns a Map by combining two Lists.",
            "examples": {
                "columns": [
                    "list1: [20, 30]",
                    "list2: [A, B]"
                ],
                "functions": [
                    {
                        "function": "lists_to_map(list1, list2)",
                        "result": "[20 : A , 30 : B]"
                    }
                ]
            }
        },
        {
            "parentName": "collect_list",
            "funcName": "collect_list",
            "displayName": "Collect List",
            "args": 1,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a column conforming to any one data type."
                }
            ],
            "funcType": "aggregate",
            "description": "Collects all the values in the column as a list.",
            "examples": {
                "columns": [
                    "Column: 30, 50, 60"
                ],
                "functions": [
                    {
                        "function": "collect_list(Column)",
                        "result": "[30, 50, 60], [30, 50, 60], [30, 50, 60]"
                    }
                ]
            }
        },
        {
            "parentName": "keys_from_map",
            "funcName": "keys_from_map",
            "displayName": "Keys from Map",
            "args": 1,
            "resultantType": "array",
            "argTypes": [
                {
                    "argType": "object",
                    "argName": "param",
                    "argDesc": "Parameter must be a column containing maps."
                }
            ],
            "funcType": "object",
            "description": "Returns the keys from the map passed as the parameter to the function.",
            "examples": {
                "columns": [
                    "Map Column: key1; value1, key2; value2, key3; value3"
                ],
                "functions": [
                    {
                        "function": "keys_from_map(mapColumn)",
                        "result": "key1, key2, key3"
                    }
                ]
            }
        },
        {
            "parentName": "to_single_line",
            "funcName": "to_single_line",
            "displayName": "To Single Line",
            "args": 1,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "string",
                    "argName": "param",
                    "argDesc": "Parameter must be a Text, or a Text column, or an expression that returns a Text."
                }
            ],
            "funcType": "string",
            "description": "Returns a text with multiple lines into a single line.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "to_single_line('Zoho\\n\\n\\nOne\\n\\n')",
                        "result": "Zoho One"
                    }
                ]
            }
        },
        {
            "parentName": "duration_to_years",
            "funcName": "duration_to_years",
            "displayName": "Duration to Years",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the number of years from the given duration value.",
            "examples": {
                "columns": [
                    "Data column: 400.10:35:23"
                ],
                "functions": [
                    {
                        "function": "duration_to_years(Data column)",
                        "result": "1"
                    }
                ]
            }
        },
        {
            "parentName": "duration_to_months",
            "funcName": "duration_to_months",
            "displayName": "Duration to Months",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the number of months from the given duration value.",
            "examples": {
                "columns": [
                    "Data column: 800.10:35:23"
                ],
                "functions": [
                    {
                        "function": "duration_to_months(Data column)",
                        "result": "26"
                    }
                ]
            }
        },
        {
            "parentName": "duration_to_weeks",
            "funcName": "duration_to_weeks",
            "displayName": "Duration to Weeks",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the number of weeks from the given duration value.",
            "examples": {
                "columns": [
                    "Data column: 800.10:35:23"
                ],
                "functions": [
                    {
                        "function": "duration_to_weeks(Data column)",
                        "result": "114"
                    }
                ]
            }
        },
        {
            "parentName": "duration_to_days",
            "funcName": "duration_to_days",
            "displayName": "Duration to Days",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the number of days from the given duration value.",
            "examples": {
                "columns": [
                    "Data column: 400.10:35:23"
                ],
                "functions": [
                    {
                        "function": "duration_to_days(Data column)",
                        "result": "400"
                    }
                ]
            }
        },
        {
            "parentName": "duration_to_hours",
            "funcName": "duration_to_hours",
            "displayName": "Duration to Hours",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the number of hours from the given duration value.",
            "examples": {
                "columns": [
                    "Data column: 800.10:35:23"
                ],
                "functions": [
                    {
                        "function": "duration_to_hours(Data column)",
                        "result": "19120"
                    }
                ]
            }
        },
        {
            "parentName": "duration_to_minutes",
            "funcName": "duration_to_minutes",
            "displayName": "Duration to Minutes",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the number of minutes from the given duration value.",
            "examples": {
                "columns": [
                    "Data column: 400.10:35:23"
                ],
                "functions": [
                    {
                        "function": "duration_to_minutes(Data column)",
                        "result": "576635"
                    }
                ]
            }
        },
        {
            "parentName": "duration_to_seconds",
            "funcName": "duration_to_seconds",
            "displayName": "Duration to Seconds",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the number of seconds from the given duration value.",
            "examples": {
                "columns": [
                    "Data column: 400.10:35:23"
                ],
                "functions": [
                    {
                        "function": "duration_to_seconds(Data column)",
                        "result": "34598123"
                    }
                ]
            }
        },
        {
            "parentName": "add_years_to_duration",
            "funcName": "add_years_to_duration",
            "displayName": "Add Years to Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_years",
                    "argDesc": "The number of years to add to the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by adding the given number of years.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "add_years_to_duration(Data column, 5)",
                        "result": "2825 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "add_months_to_duration",
            "funcName": "add_months_to_duration",
            "displayName": "Add Months to Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_months",
                    "argDesc": "The number of months to add to the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by adding the given number of months.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "add_months_to_duration(Data column, 7)",
                        "result": "1210 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "add_weeks_to_duration",
            "funcName": "add_weeks_to_duration",
            "displayName": "Add Weeks to Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_weeks",
                    "argDesc": "The number of weeks to add to the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by adding the given number of weeks.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "add_weeks_to_duration(Data column, 8)",
                        "result": "1056 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "add_days_to_duration",
            "funcName": "add_days_to_duration",
            "displayName": "Add Days to Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_days",
                    "argDesc": "The number of days to add to the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by adding the given number of days.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "add_days_to_duration(Data column, 8)",
                        "result": "1008 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "add_hours_to_duration",
            "funcName": "add_hours_to_duration",
            "displayName": "Add Hours to Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_hours",
                    "argDesc": "The number of hours to add to the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by adding the given number of hours.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "add_hours_to_duration(Data column, 5)",
                        "result": "1000 days 16:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "add_minutes_to_duration",
            "funcName": "add_minutes_to_duration",
            "displayName": "Add Minutes to Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_minutes",
                    "argDesc": "The number of minutes to add to the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by adding the given number of minutes.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "add_minutes_to_duration(Data column, 5)",
                        "result": "1000 days 11:27:33"
                    }
                ]
            }
        },
        {
            "parentName": "add_seconds_to_duration",
            "funcName": "add_seconds_to_duration",
            "displayName": "Add Seconds to Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_seconds",
                    "argDesc": "The number of seconds to add to the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by adding the given number of seconds.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "add_seconds_to_duration(Data column, 5)",
                        "result": "1000 days 11:22:38"
                    }
                ]
            }
        },
        {
            "parentName": "sub_years_from_duration",
            "funcName": "sub_years_from_duration",
            "displayName": "Sub Years from Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_years",
                    "argDesc": "The number of years to subtract from the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by subtracting the given number of years.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "sub_years_from_duration(Data column, 1)",
                        "result": "635 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "sub_months_from_duration",
            "funcName": "sub_months_from_duration",
            "displayName": "Sub Months from Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_months",
                    "argDesc": "The number of months to subtract from the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by subtracting the given number of months.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "sub_months_to_duration(Data column, 3)",
                        "result": "910 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "sub_weeks_from_duration",
            "funcName": "sub_weeks_from_duration",
            "displayName": "Sub Weeks from Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_weeks",
                    "argDesc": "The number of weeks to subtract from the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by subtracting the given number of weeks.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "sub_weeks_from_duration(Data column, 10)",
                        "result": "930 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "sub_days_from_duration",
            "funcName": "sub_days_from_duration",
            "displayName": "Sub Days from Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_days",
                    "argDesc": "The number of days to subtract from the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by subtracting the given number of days.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "sub_days_from_duration(Data column, 30)",
                        "result": "970 days 11:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "sub_hours_from_duration",
            "funcName": "sub_hours_from_duration",
            "displayName": "Sub Hours from Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_hours",
                    "argDesc": "The number of hours to subtract from the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by subtracting the given number of hours.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "sub_hours_from_duration(Data column, 3)",
                        "result": "1000 days 9:22:33"
                    }
                ]
            }
        },
        {
            "parentName": "sub_minutes_from_duration",
            "funcName": "sub_minutes_from_duration",
            "displayName": "Sub Minutes from Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_minutes",
                    "argDesc": "The number of minutes to subtract from the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by subtracting the given number of minutes.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "sub_minutes_from_duration(Data column, 10)",
                        "result": "1000 days 11:12:33"
                    }
                ]
            }
        },
        {
            "parentName": "sub_seconds_from_duration",
            "funcName": "sub_seconds_from_duration",
            "displayName": "Sub Seconds from Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "duration",
                    "argName": "duration",
                    "argDesc": "Specifies the Duration column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_seconds",
                    "argDesc": "The number of seconds to subtract from the duration value."
                }
            ],
            "funcType": "duration",
            "flexible": true,
            "description": "Returns the duration value by subtracting the given number of seconds.",
            "examples": {
                "columns": [
                    "Data column: 1000 days 11:22:33"
                ],
                "functions": [
                    {
                        "function": "sub_seconds_from_duration(Data column, 10)",
                        "result": "1000 days 11:22:23"
                    }
                ]
            }
        },
        {
            "parentName": "timestamp_diff_in_duration",
            "funcName": "timestamp_diff_in_duration",
            "displayName": "Timestamp Diff in Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "datetime",
                    "argName": "date1",
                    "argDesc": "Specifies the Date, Time, or a Datetime column."
                },
                {
                    "argType": "datetime",
                    "argName": "date2",
                    "argDesc": "Specifies the Date, Time, or a Datetime column."
                }
            ],
            "funcType": "duration",
            "description": "Returns the difference of two timestamps value in duration.",
            "examples": {
                "columns": [
                    "Data column 1: 17-08-1991 16:15:14",
                    "Data column 2: 17-08-1990 14:15:16"
                ],
                "functions": [
                    {
                        "function": "timestamp_diff_in_duration('Data column 1', 'Data column 2')",
                        "result": "365.1:59:58.0"
                    }
                ]
            }
        },
        {
            "parentName": "make_duration",
            "funcName": "make_duration",
            "displayName": "Make Duration",
            "args": 7,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "num_of_years",
                    "argDesc": "Specifies the number of years in the duration value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_months",
                    "argDesc": "Specifies the number of months in the duration value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_weeks",
                    "argDesc": "Specifies the number of weeks in the duration value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_days",
                    "argDesc": "Specifies the number of days in the duration value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_hours",
                    "argDesc": "Specifies the number of hours in the duration value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_minutes",
                    "argDesc": "Specifies the number of minutes in the duration value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_seconds",
                    "argDesc": "Specifies the number of seconds in the duration value."
                }
            ],
            "funcType": "duration",
            "description": "Returns the duration value using the given number of years, months, weeks, days, hours, minutes, and seconds. Enter 0 if no column or value is specified for any of the parameters.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "make_duration('12','11','23','11','9','10','5')",
                        "result": "4882.9:10:5.0"
                    }
                ]
            }
        },
        {
            "parentName": "time_to_minute",
            "funcName": "time_to_minute",
            "displayName": "Time to Minute",
            "args": 1,
            "resultantType": "number",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time",
                    "argDesc": "Specifies a Time or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the total number of minutes of the given time value.",
            "examples": {
                "columns": [
                    "Data column: 11:22:33"
                ],
                "functions": [
                    {
                        "function": "time_to_minute('Data column)",
                        "result": "682"
                    }
                ]
            }
        },
        {
            "parentName": "make_time",
            "funcName": "make_time",
            "displayName": "Make Time",
            "args": 3,
            "resultantType": "string",
            "argTypes": [
                {
                    "argType": "number",
                    "argName": "num_of_hours",
                    "argDesc": "Specifies the number of hours in the time value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_minutes",
                    "argDesc": "Specifies the number of minutes in the time value."
                },
                {
                    "argType": "number",
                    "argName": "num_of_seconds",
                    "argDesc": "Specifies the number of seconds in the time value."
                }
            ],
            "funcType": "date",
            "description": "Returns the time value using the given number of hours, minutes, and seconds.",
            "examples": {
                "columns": [],
                "functions": [
                    {
                        "function": "make_time('11','23','25')",
                        "result": "11:23:25"
                    }
                ]
            }
        },
        {
            "parentName": "is_current_hour",
            "funcName": "is_current_hour",
            "displayName": "Is Current Hour",
            "args": 1,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time",
                    "argDesc": "Specifies a Time or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given time falls within the current hour, false otherwise.",
            "examples": {
                "columns": [
                    "Data column: 02:35:54"
                ],
                "functions": [
                    {
                        "function": "is_current_hour(Data column)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "is_last_nhour",
            "funcName": "is_last_nhour",
            "displayName": "Is Last NHour",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time",
                    "argDesc": "Specifies a Time or a Datetime column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_hours",
                    "argDesc": "Specifies the number of hours."
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given hour falls under the last N number of hours from the current hour.",
            "examples": {
                "columns": [
                    "Data column: 02:35:54"
                ],
                "functions": [
                    {
                        "function": "is_last_nhour(Data column, 3)",
                        "result": "false"
                    }
                ]
            }
        },
        {
            "parentName": "is_next_nhour",
            "funcName": "is_next_nhour",
            "displayName": "Is Next NHour",
            "args": 2,
            "resultantType": "boolean",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time",
                    "argDesc": "Specifies a Time or a Datetime column."
                },
                {
                    "argType": "number",
                    "argName": "num_of_hours",
                    "argDesc": "Specifies the number of hours."
                }
            ],
            "funcType": "date",
            "description": "Returns true if the given hour falls under the next N number of hours from the current hour.",
            "examples": {
                "columns": [
                    "Data column: 02:35:54"
                ],
                "functions": [
                    {
                        "function": "is_next_nhour(Data column, 3)",
                        "result": "true"
                    }
                ]
            }
        },
        {
            "parentName": "start_of_hour",
            "funcName": "start_of_hour",
            "displayName": "Start of Hour",
            "args": 1,
            "resultantType": "time",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time",
                    "argDesc": "Specifies a Time or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the starting hour of the given time value.",
            "examples": {
                "columns": [
                    "Data column: 10:35:23"
                ],
                "functions": [
                    {
                        "function": "start_of_hour(Data column)",
                        "result": "10:00:00"
                    }
                ]
            }
        },
        {
            "parentName": "end_of_hour",
            "funcName": "end_of_hour",
            "displayName": "End of Hour",
            "args": 1,
            "resultantType": "time",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time",
                    "argDesc": "Specifies a Time or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the ending hour of the given time value.",
            "examples": {
                "columns": [
                    "Data column: 10:35:23"
                ],
                "functions": [
                    {
                        "function": "end_of_hour(Data column)",
                        "result": "11:00:00"
                    }
                ]
            }
        },
        {
            "parentName": "time_sum_in_duration",
            "funcName": "time_sum_in_duration",
            "displayName": "Time Sum In Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time1",
                    "argDesc": "Specifies a Time or a Datetime column."
                },
                {
                    "argType": "time",
                    "argName": "time2",
                    "argDesc": "Specifies a Time or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the sum of two time values in the default duration format.",
            "examples": {
                "columns": [
                    "Data column 1: 10:00:00",
                    "Data column 2: 20:00:00"
                ],
                "functions": [
                    {
                        "function": "time_sum_in_duration('Data column 1', 'Data column 2')",
                        "result": "1.6:0:0.0"
                    }
                ]
            }
        },
        {
            "parentName": "time_diff_in_duration",
            "funcName": "time_diff_in_duration",
            "displayName": "Time Diff In Duration",
            "args": 2,
            "resultantType": "duration",
            "argTypes": [
                {
                    "argType": "time",
                    "argName": "time1",
                    "argDesc": "Specifies a Time or a Datetime column."
                },
                {
                    "argType": "time",
                    "argName": "time2",
                    "argDesc": "Specifies a Time or a Datetime column."
                }
            ],
            "funcType": "date",
            "description": "Returns the difference between two time values in the default duration format.",
            "examples": {
                "columns": [
                    "Data column 1: 20:00:00",
                    "Data column 2: 10:00:00"
                ],
                "functions": [
                    {
                        "function": "time_diff_in_duration('Data column 1', 'Data column 2')",
                        "result": "0.10:0:0.0"
                    }
                ]
            }
        }
    ]
}
